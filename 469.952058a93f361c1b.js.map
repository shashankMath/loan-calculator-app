{"version":3,"file":"469.952058a93f361c1b.js","mappings":"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","names":["Segment","constructor","hostRef","registerInstance","this","ionChange","createEvent","ionSelect","ionStyle","segmentViewEl","onClick","ev","current","target","previous","checked","tagName","value","emitValueChange","updateSegmentView","scrollable","checkButton","swipeGesture","setCheckedClasses","onSlottedItemsChange","valueChanged","getSegmentButton","selector","_a","_b","buttons","getButtons","filter","button","disabled","currIndex","findIndex","document","activeElement","length","activated","color","undefined","selectOnFocus","colorChanged","oldValue","emitStyle","swipeGestureChanged","gestureChanged","find","triggerScrollOnValueChange","emit","scrollActiveButtonIntoView","disabledChanged","gesture","enable","connectedCallback","getSegmentView","disconnectedCallback","componentWillLoad","componentDidLoad","_this","_asyncToGenerator","raf","Promise","resolve","then","__webpack_require__","bind","createGesture","el","gestureName","gesturePriority","threshold","passive","onStart","onMove","onEnd","detail","valueBeforeGesture","activate","setNextIndex","setActivated","event","stopImmediatePropagation","Array","from","querySelectorAll","forEach","classList","toggle","clicked","getIndicator","shadowRoot","querySelector","previousIndicator","currentIndicator","previousClientRect","getBoundingClientRect","currentClientRect","transform","left","width","writeTask","remove","style","setProperty","add","next","firstContentId","contentId","segmentContent","closest","handleSegmentViewScroll","scrollRatio","isManualScroll","dispatchedFrom","segmentEl","composedPath","includes","contains","index","nextIndex","Math","round","lastNextIndex","smoothScroll","btn","segmentView","setContent","activeButton","scrollContainerBox","activeButtonBox","scrollTo","top","scrollLeft","x","behavior","isEnd","rtl","isRTL","rect","currentX","previousY","height","nextEl","getRootNode","elementFromPoint","newIndex","segment","onKeyDown","keyDownSelectsButton","key","preventDefault","setFocus","render","mode","getIonMode","h","Host","role","class","createColorClasses","t","hostContext","onSlotchange","getElement","watchers","ios","md","ids","SegmentButton","inheritedAttributes","updateStyle","forceUpdate","updateState","layout","type","addEventListener","getElementById","console","warn","error","removeEventListener","Object","assign","inheritAttributes","hasLabel","hasIcon","_this2","nativeEl","focus","d","ref","part","cssClassMap","getClassMap","classes","map","getClassList","isArray","split","c","trim","SCHEME","openURL","_ref","url","direction","animation","test","router","push","_x","_x2","_x3","_x4","apply","arguments"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@ionic/core/dist/esm/ion-segment_2.entry.js","./node_modules/@ionic/core/dist/esm/theme-01f3f29c.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, d as createEvent, w as writeTask, h, f as Host, i as getElement, j as forceUpdate } from './index-28849c61.js';\nimport { r as raf, a as addEventListener, b as removeEventListener, h as inheritAttributes } from './helpers-da915de8.js';\nimport { i as isRTL } from './dir-babeabeb.js';\nimport { c as createColorClasses, h as hostContext } from './theme-01f3f29c.js';\nimport { b as getIonMode } from './ionic-global-c81d82ab.js';\n\nconst segmentIosCss = \":host{--ripple-color:currentColor;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:grid;grid-auto-columns:1fr;position:relative;-ms-flex-align:stretch;align-items:stretch;-ms-flex-pack:center;justify-content:center;width:100%;background:var(--background);font-family:var(--ion-font-family, inherit);text-align:center;contain:paint;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host(.segment-scrollable){-ms-flex-pack:start;justify-content:start;width:auto;overflow-x:auto;grid-auto-columns:minmax(-webkit-min-content, 1fr);grid-auto-columns:minmax(min-content, 1fr)}:host(.segment-scrollable::-webkit-scrollbar){display:none}:host{--background:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.065);border-radius:8px;overflow:hidden;z-index:0}:host(.ion-color){background:rgba(var(--ion-color-base-rgb), 0.065)}:host(.in-toolbar){-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:0;margin-bottom:0;width:auto}:host(.in-toolbar:not(.ion-color)){background:var(--ion-toolbar-segment-background, var(--background))}:host(.in-toolbar-color:not(.ion-color)){background:rgba(var(--ion-color-contrast-rgb), 0.11)}\";\nconst IonSegmentIosStyle0 = segmentIosCss;\n\nconst segmentMdCss = \":host{--ripple-color:currentColor;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:grid;grid-auto-columns:1fr;position:relative;-ms-flex-align:stretch;align-items:stretch;-ms-flex-pack:center;justify-content:center;width:100%;background:var(--background);font-family:var(--ion-font-family, inherit);text-align:center;contain:paint;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host(.segment-scrollable){-ms-flex-pack:start;justify-content:start;width:auto;overflow-x:auto;grid-auto-columns:minmax(-webkit-min-content, 1fr);grid-auto-columns:minmax(min-content, 1fr)}:host(.segment-scrollable::-webkit-scrollbar){display:none}:host{--background:transparent;grid-auto-columns:minmax(auto, 360px)}:host(.in-toolbar){min-height:var(--min-height)}:host(.segment-scrollable) ::slotted(ion-segment-button){min-width:auto}\";\nconst IonSegmentMdStyle0 = segmentMdCss;\n\nconst Segment = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionChange = createEvent(this, \"ionChange\", 7);\n        this.ionSelect = createEvent(this, \"ionSelect\", 7);\n        this.ionStyle = createEvent(this, \"ionStyle\", 7);\n        this.segmentViewEl = null;\n        this.onClick = (ev) => {\n            const current = ev.target;\n            const previous = this.checked;\n            // If the current element is a segment then that means\n            // the user tried to swipe to a segment button and\n            // click a segment button at the same time so we should\n            // not update the checked segment button\n            if (current.tagName === 'ION-SEGMENT') {\n                return;\n            }\n            this.value = current.value;\n            if (current !== previous) {\n                this.emitValueChange();\n            }\n            if (this.segmentViewEl) {\n                this.updateSegmentView();\n                if (this.scrollable && previous) {\n                    this.checkButton(previous, current);\n                }\n            }\n            else if (this.scrollable || !this.swipeGesture) {\n                if (previous) {\n                    this.checkButton(previous, current);\n                }\n                else {\n                    this.setCheckedClasses();\n                }\n            }\n        };\n        this.onSlottedItemsChange = () => {\n            /**\n             * When the slotted segment buttons change we need to\n             * ensure that the new segment buttons are checked if\n             * the value matches the segment button value.\n             */\n            this.valueChanged(this.value);\n        };\n        this.getSegmentButton = (selector) => {\n            var _a, _b;\n            const buttons = this.getButtons().filter((button) => !button.disabled);\n            const currIndex = buttons.findIndex((button) => button === document.activeElement);\n            switch (selector) {\n                case 'first':\n                    return buttons[0];\n                case 'last':\n                    return buttons[buttons.length - 1];\n                case 'next':\n                    return (_a = buttons[currIndex + 1]) !== null && _a !== void 0 ? _a : buttons[0];\n                case 'previous':\n                    return (_b = buttons[currIndex - 1]) !== null && _b !== void 0 ? _b : buttons[buttons.length - 1];\n                default:\n                    return null;\n            }\n        };\n        this.activated = false;\n        this.color = undefined;\n        this.disabled = false;\n        this.scrollable = false;\n        this.swipeGesture = true;\n        this.value = undefined;\n        this.selectOnFocus = false;\n    }\n    colorChanged(value, oldValue) {\n        /**\n         * If color is set after not having\n         * previously been set (or vice versa),\n         * we need to emit style so the segment-buttons\n         * can apply their color classes properly.\n         */\n        if ((oldValue === undefined && value !== undefined) || (oldValue !== undefined && value === undefined)) {\n            this.emitStyle();\n        }\n    }\n    swipeGestureChanged() {\n        this.gestureChanged();\n    }\n    valueChanged(value, oldValue) {\n        // Force a value to exist if we're using a segment view\n        if (this.segmentViewEl && value === undefined) {\n            this.value = this.getButtons()[0].value;\n            return;\n        }\n        if (oldValue !== undefined && value !== undefined) {\n            const buttons = this.getButtons();\n            const previous = buttons.find((button) => button.value === oldValue);\n            const current = buttons.find((button) => button.value === value);\n            if (previous && current) {\n                if (!this.segmentViewEl) {\n                    this.checkButton(previous, current);\n                }\n                else if (this.triggerScrollOnValueChange !== false) {\n                    this.updateSegmentView();\n                }\n            }\n        }\n        else if (value !== undefined && oldValue === undefined && this.segmentViewEl) {\n            this.updateSegmentView();\n        }\n        /**\n         * `ionSelect` is emitted every time the value changes (internal or external changes).\n         * Used by `ion-segment-button` to determine if the button should be checked.\n         */\n        this.ionSelect.emit({ value });\n        // The scroll listener should handle scrolling the active button into view as needed\n        if (!this.segmentViewEl) {\n            this.scrollActiveButtonIntoView();\n        }\n        this.triggerScrollOnValueChange = undefined;\n    }\n    disabledChanged() {\n        this.gestureChanged();\n        if (!this.segmentViewEl) {\n            const buttons = this.getButtons();\n            for (const button of buttons) {\n                button.disabled = this.disabled;\n            }\n        }\n        else {\n            this.segmentViewEl.disabled = this.disabled;\n        }\n    }\n    gestureChanged() {\n        if (this.gesture) {\n            this.gesture.enable(!this.scrollable && !this.disabled && this.swipeGesture);\n        }\n    }\n    connectedCallback() {\n        this.emitStyle();\n        this.segmentViewEl = this.getSegmentView();\n    }\n    disconnectedCallback() {\n        this.segmentViewEl = null;\n    }\n    componentWillLoad() {\n        this.emitStyle();\n    }\n    async componentDidLoad() {\n        this.setCheckedClasses();\n        /**\n         * We need to wait for the buttons to all be rendered\n         * before we can scroll.\n         */\n        raf(() => {\n            /**\n             * When the segment loads for the first\n             * time we just want to snap the active button into\n             * place instead of scroll. Smooth scrolling should only\n             * happen when the user interacts with the segment.\n             */\n            this.scrollActiveButtonIntoView(false);\n        });\n        this.gesture = (await import('./index-39782642.js')).createGesture({\n            el: this.el,\n            gestureName: 'segment',\n            gesturePriority: 100,\n            threshold: 0,\n            passive: false,\n            onStart: (ev) => this.onStart(ev),\n            onMove: (ev) => this.onMove(ev),\n            onEnd: (ev) => this.onEnd(ev),\n        });\n        this.gestureChanged();\n        if (this.disabled) {\n            this.disabledChanged();\n        }\n        // Update segment view based on the initial value,\n        // but do not animate the scroll\n        this.updateSegmentView(false);\n    }\n    onStart(detail) {\n        this.valueBeforeGesture = this.value;\n        this.activate(detail);\n    }\n    onMove(detail) {\n        this.setNextIndex(detail);\n    }\n    onEnd(detail) {\n        this.setActivated(false);\n        this.setNextIndex(detail, true);\n        detail.event.stopImmediatePropagation();\n        const value = this.value;\n        if (value !== undefined) {\n            if (this.valueBeforeGesture !== value) {\n                this.emitValueChange();\n                this.updateSegmentView();\n            }\n        }\n        this.valueBeforeGesture = undefined;\n    }\n    /**\n     * Emits an `ionChange` event.\n     *\n     * This API should be called for user committed changes.\n     * This API should not be used for external value changes.\n     */\n    emitValueChange() {\n        const { value } = this;\n        this.ionChange.emit({ value });\n    }\n    getButtons() {\n        return Array.from(this.el.querySelectorAll('ion-segment-button'));\n    }\n    get checked() {\n        return this.getButtons().find((button) => button.value === this.value);\n    }\n    /*\n     * Activate both the segment and the buttons\n     * due to a bug with ::slotted in Safari\n     */\n    setActivated(activated) {\n        const buttons = this.getButtons();\n        buttons.forEach((button) => {\n            button.classList.toggle('segment-button-activated', activated);\n        });\n        this.activated = activated;\n    }\n    activate(detail) {\n        const clicked = detail.event.target;\n        const buttons = this.getButtons();\n        const checked = buttons.find((button) => button.value === this.value);\n        // Make sure we are only checking for activation on a segment button\n        // since disabled buttons will get the click on the segment\n        if (clicked.tagName !== 'ION-SEGMENT-BUTTON') {\n            return;\n        }\n        // If there are no checked buttons, set the current button to checked\n        if (!checked) {\n            this.value = clicked.value;\n            this.setCheckedClasses();\n        }\n        // If the gesture began on the clicked button with the indicator\n        // then we should activate the indicator\n        if (this.value === clicked.value) {\n            this.setActivated(true);\n        }\n    }\n    getIndicator(button) {\n        const root = button.shadowRoot || button;\n        return root.querySelector('.segment-button-indicator');\n    }\n    checkButton(previous, current) {\n        const previousIndicator = this.getIndicator(previous);\n        const currentIndicator = this.getIndicator(current);\n        if (previousIndicator === null || currentIndicator === null) {\n            return;\n        }\n        const previousClientRect = previousIndicator.getBoundingClientRect();\n        const currentClientRect = currentIndicator.getBoundingClientRect();\n        const widthDelta = previousClientRect.width / currentClientRect.width;\n        const xPosition = previousClientRect.left - currentClientRect.left;\n        // Scale the indicator width to match the previous indicator width\n        // and translate it on top of the previous indicator\n        const transform = `translate3d(${xPosition}px, 0, 0) scaleX(${widthDelta})`;\n        writeTask(() => {\n            // Remove the transition before positioning on top of the previous indicator\n            currentIndicator.classList.remove('segment-button-indicator-animated');\n            currentIndicator.style.setProperty('transform', transform);\n            // Force a repaint to ensure the transform happens\n            currentIndicator.getBoundingClientRect();\n            // Add the transition to move the indicator into place\n            currentIndicator.classList.add('segment-button-indicator-animated');\n            // Remove the transform to slide the indicator back to the button clicked\n            currentIndicator.style.setProperty('transform', '');\n            this.scrollActiveButtonIntoView(true);\n        });\n        this.value = current.value;\n        this.setCheckedClasses();\n    }\n    setCheckedClasses() {\n        const buttons = this.getButtons();\n        const index = buttons.findIndex((button) => button.value === this.value);\n        const next = index + 1;\n        for (const button of buttons) {\n            button.classList.remove('segment-button-after-checked');\n        }\n        if (next < buttons.length) {\n            buttons[next].classList.add('segment-button-after-checked');\n        }\n    }\n    getSegmentView() {\n        const buttons = this.getButtons();\n        // Get the first button with a contentId\n        const firstContentId = buttons.find((button) => button.contentId);\n        // Get the segment content with an id matching the button's contentId\n        const segmentContent = document.querySelector(`ion-segment-content[id=\"${firstContentId === null || firstContentId === void 0 ? void 0 : firstContentId.contentId}\"]`);\n        // Return the segment view for that matching segment content\n        return segmentContent === null || segmentContent === void 0 ? void 0 : segmentContent.closest('ion-segment-view');\n    }\n    handleSegmentViewScroll(ev) {\n        const { scrollRatio, isManualScroll } = ev.detail;\n        if (!isManualScroll) {\n            return;\n        }\n        const dispatchedFrom = ev.target;\n        const segmentViewEl = this.segmentViewEl;\n        const segmentEl = this.el;\n        // Only update the indicator if the event was dispatched from the correct segment view\n        if (ev.composedPath().includes(segmentViewEl) || (dispatchedFrom === null || dispatchedFrom === void 0 ? void 0 : dispatchedFrom.contains(segmentEl))) {\n            const buttons = this.getButtons();\n            // If no buttons are found or there is no value set then do nothing\n            if (!buttons.length)\n                return;\n            const index = buttons.findIndex((button) => button.value === this.value);\n            const current = buttons[index];\n            const nextIndex = Math.round(scrollRatio * (buttons.length - 1));\n            if (this.lastNextIndex === undefined || this.lastNextIndex !== nextIndex) {\n                this.lastNextIndex = nextIndex;\n                this.triggerScrollOnValueChange = false;\n                this.checkButton(current, buttons[nextIndex]);\n                this.emitValueChange();\n            }\n        }\n    }\n    /**\n     * Finds the related segment view and sets its current content\n     * based on the selected segment button. This method\n     * should be called on initial load of the segment,\n     * after the gesture is completed (if dragging between segments)\n     * and when a segment button is clicked directly.\n     */\n    updateSegmentView(smoothScroll = true) {\n        const buttons = this.getButtons();\n        const button = buttons.find((btn) => btn.value === this.value);\n        // If the button does not have a contentId then there is\n        // no associated segment view to update\n        if (!(button === null || button === void 0 ? void 0 : button.contentId)) {\n            return;\n        }\n        const segmentView = this.segmentViewEl;\n        if (segmentView) {\n            segmentView.setContent(button.contentId, smoothScroll);\n        }\n    }\n    scrollActiveButtonIntoView(smoothScroll = true) {\n        const { scrollable, value, el } = this;\n        if (scrollable) {\n            const buttons = this.getButtons();\n            const activeButton = buttons.find((button) => button.value === value);\n            if (activeButton !== undefined) {\n                const scrollContainerBox = el.getBoundingClientRect();\n                const activeButtonBox = activeButton.getBoundingClientRect();\n                /**\n                 * Subtract the active button x position from the scroll\n                 * container x position. This will give us the x position\n                 * of the active button within the scroll container.\n                 */\n                const activeButtonLeft = activeButtonBox.x - scrollContainerBox.x;\n                /**\n                 * If we just used activeButtonLeft, then the active button\n                 * would be aligned with the left edge of the scroll container.\n                 * Instead, we want the segment button to be centered. As a result,\n                 * we subtract half of the scroll container width. This will position\n                 * the left edge of the active button at the midpoint of the scroll container.\n                 * We then add half of the active button width. This will position the active\n                 * button such that the midpoint of the active button is at the midpoint of the\n                 * scroll container.\n                 */\n                const centeredX = activeButtonLeft - scrollContainerBox.width / 2 + activeButtonBox.width / 2;\n                /**\n                 * newScrollPosition is the absolute scroll position that the\n                 * container needs to move to in order to center the active button.\n                 * It is calculated by adding the current scroll position\n                 * (scrollLeft) to the offset needed to center the button\n                 * (centeredX).\n                 */\n                const newScrollPosition = el.scrollLeft + centeredX;\n                /**\n                 * We intentionally use scrollTo here instead of scrollIntoView\n                 * to avoid a WebKit bug where accelerated animations break\n                 * when using scrollIntoView. Using scrollIntoView will cause the\n                 * segment container to jump during the transition and then snap into place.\n                 * This is because scrollIntoView can potentially cause parent element\n                 * containers to also scroll. scrollTo does not have this same behavior, so\n                 * we use this API instead.\n                 *\n                 * scrollTo is used instead of scrollBy because there is a\n                 * Webkit bug that causes scrollBy to not work smoothly when\n                 * the active button is near the edge of the scroll container.\n                 * This leads to the buttons to jump around during the transition.\n                 *\n                 * Note that if there is not enough scrolling space to center the element\n                 * within the scroll container, the browser will attempt\n                 * to center by as much as it can.\n                 */\n                el.scrollTo({\n                    top: 0,\n                    left: newScrollPosition,\n                    behavior: smoothScroll ? 'smooth' : 'instant',\n                });\n            }\n        }\n    }\n    setNextIndex(detail, isEnd = false) {\n        const rtl = isRTL(this.el);\n        const activated = this.activated;\n        const buttons = this.getButtons();\n        const index = buttons.findIndex((button) => button.value === this.value);\n        const previous = buttons[index];\n        let current;\n        let nextIndex;\n        if (index === -1) {\n            return;\n        }\n        // Get the element that the touch event started on in case\n        // it was the checked button, then we will move the indicator\n        const rect = previous.getBoundingClientRect();\n        const left = rect.left;\n        const width = rect.width;\n        // Get the element that the gesture is on top of based on the currentX of the\n        // gesture event and the Y coordinate of the starting element, since the gesture\n        // can move up and down off of the segment\n        const currentX = detail.currentX;\n        const previousY = rect.top + rect.height / 2;\n        /**\n         * Segment can be used inside the shadow dom\n         * so doing document.elementFromPoint would never\n         * return a segment button in that instance.\n         * We use getRootNode to which will return the parent\n         * shadow root if used inside a shadow component and\n         * returns document otherwise.\n         */\n        const root = this.el.getRootNode();\n        const nextEl = root.elementFromPoint(currentX, previousY);\n        const decreaseIndex = rtl ? currentX > left + width : currentX < left;\n        const increaseIndex = rtl ? currentX < left : currentX > left + width;\n        // If the indicator is currently activated then we have started the gesture\n        // on top of the checked button so we need to slide the indicator\n        // by checking the button next to it as we move\n        if (activated && !isEnd) {\n            // Decrease index, move left in LTR & right in RTL\n            if (decreaseIndex) {\n                const newIndex = index - 1;\n                if (newIndex >= 0) {\n                    nextIndex = newIndex;\n                }\n                // Increase index, moves right in LTR & left in RTL\n            }\n            else if (increaseIndex) {\n                if (activated && !isEnd) {\n                    const newIndex = index + 1;\n                    if (newIndex < buttons.length) {\n                        nextIndex = newIndex;\n                    }\n                }\n            }\n            if (nextIndex !== undefined && !buttons[nextIndex].disabled) {\n                current = buttons[nextIndex];\n            }\n        }\n        // If the indicator is not activated then we will just set the indicator\n        // to the element where the gesture ended\n        if (!activated && isEnd) {\n            current = nextEl;\n        }\n        if (current != null) {\n            /**\n             * If current element is ion-segment then that means\n             * user tried to select a disabled ion-segment-button,\n             * and we should not update the ripple.\n             */\n            if (current.tagName === 'ION-SEGMENT') {\n                return false;\n            }\n            if (previous !== current) {\n                this.checkButton(previous, current);\n            }\n        }\n        return true;\n    }\n    emitStyle() {\n        this.ionStyle.emit({\n            segment: true,\n        });\n    }\n    onKeyDown(ev) {\n        const rtl = isRTL(this.el);\n        let keyDownSelectsButton = this.selectOnFocus;\n        let current;\n        switch (ev.key) {\n            case 'ArrowRight':\n                ev.preventDefault();\n                current = rtl ? this.getSegmentButton('previous') : this.getSegmentButton('next');\n                break;\n            case 'ArrowLeft':\n                ev.preventDefault();\n                current = rtl ? this.getSegmentButton('next') : this.getSegmentButton('previous');\n                break;\n            case 'Home':\n                ev.preventDefault();\n                current = this.getSegmentButton('first');\n                break;\n            case 'End':\n                ev.preventDefault();\n                current = this.getSegmentButton('last');\n                break;\n            case ' ':\n            case 'Enter':\n                ev.preventDefault();\n                current = document.activeElement;\n                keyDownSelectsButton = true;\n        }\n        if (!current) {\n            return;\n        }\n        if (keyDownSelectsButton) {\n            const previous = this.checked;\n            this.checkButton(previous || current, current);\n            if (current !== previous) {\n                this.emitValueChange();\n            }\n        }\n        current.setFocus();\n    }\n    render() {\n        const mode = getIonMode(this);\n        return (h(Host, { key: '66bd7a565ba73540b3bbe56dd23b95e59bcef9bc', role: \"tablist\", onClick: this.onClick, class: createColorClasses(this.color, {\n                [mode]: true,\n                'in-toolbar': hostContext('ion-toolbar', this.el),\n                'in-toolbar-color': hostContext('ion-toolbar[color]', this.el),\n                'segment-activated': this.activated,\n                'segment-disabled': this.disabled,\n                'segment-scrollable': this.scrollable,\n            }) }, h(\"slot\", { key: '782c521b1a33729b8eab1c4b879bc3f2ff48ae1b', onSlotchange: this.onSlottedItemsChange })));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"color\": [\"colorChanged\"],\n        \"swipeGesture\": [\"swipeGestureChanged\"],\n        \"value\": [\"valueChanged\"],\n        \"disabled\": [\"disabledChanged\"]\n    }; }\n};\nSegment.style = {\n    ios: IonSegmentIosStyle0,\n    md: IonSegmentMdStyle0\n};\n\nconst segmentButtonIosCss = \":host{--color:initial;--color-hover:var(--color);--color-checked:var(--color);--color-disabled:var(--color);--padding-start:0;--padding-end:0;--padding-top:0;--padding-bottom:0;border-radius:var(--border-radius);display:-ms-flexbox;display:flex;position:relative;-ms-flex-direction:column;flex-direction:column;height:auto;background:var(--background);color:var(--color);text-decoration:none;text-overflow:ellipsis;white-space:nowrap;cursor:pointer;grid-row:1;-webkit-font-kerning:none;font-kerning:none}.button-native{border-radius:0;font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;-webkit-margin-start:var(--margin-start);margin-inline-start:var(--margin-start);-webkit-margin-end:var(--margin-end);margin-inline-end:var(--margin-end);margin-top:var(--margin-top);margin-bottom:var(--margin-bottom);-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);-webkit-transform:translate3d(0,  0,  0);transform:translate3d(0,  0,  0);display:-ms-flexbox;display:flex;position:relative;-ms-flex-direction:inherit;flex-direction:inherit;-ms-flex-positive:1;flex-grow:1;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;min-width:inherit;max-width:inherit;height:auto;min-height:inherit;max-height:inherit;-webkit-transition:var(--transition);transition:var(--transition);border:none;outline:none;background:transparent;contain:content;pointer-events:none;overflow:hidden;z-index:2}.button-native::after{left:0;right:0;top:0;bottom:0;position:absolute;content:\\\"\\\";opacity:0}.button-inner{display:-ms-flexbox;display:flex;position:relative;-ms-flex-flow:inherit;flex-flow:inherit;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:100%;z-index:1}:host(.segment-button-checked){background:var(--background-checked);color:var(--color-checked)}:host(.segment-button-disabled){cursor:default;pointer-events:none}:host(.ion-focused) .button-native{color:var(--color-focused)}:host(.ion-focused) .button-native::after{background:var(--background-focused);opacity:var(--background-focused-opacity)}:host(:focus){outline:none}@media (any-hover: hover){:host(:hover) .button-native{color:var(--color-hover)}:host(:hover) .button-native::after{background:var(--background-hover);opacity:var(--background-hover-opacity)}:host(.segment-button-checked:hover) .button-native{color:var(--color-checked)}}::slotted(ion-icon){-ms-flex-negative:0;flex-shrink:0;-ms-flex-order:-1;order:-1;pointer-events:none}::slotted(ion-label){display:block;-ms-flex-item-align:center;align-self:center;max-width:100%;line-height:22px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;-webkit-box-sizing:border-box;box-sizing:border-box;pointer-events:none}:host(.segment-button-layout-icon-top) .button-native{-ms-flex-direction:column;flex-direction:column}:host(.segment-button-layout-icon-start) .button-native{-ms-flex-direction:row;flex-direction:row}:host(.segment-button-layout-icon-end) .button-native{-ms-flex-direction:row-reverse;flex-direction:row-reverse}:host(.segment-button-layout-icon-bottom) .button-native{-ms-flex-direction:column-reverse;flex-direction:column-reverse}:host(.segment-button-layout-icon-hide) ::slotted(ion-icon){display:none}:host(.segment-button-layout-label-hide) ::slotted(ion-label){display:none}ion-ripple-effect{color:var(--ripple-color, var(--color-checked))}.segment-button-indicator{-webkit-transform-origin:left;transform-origin:left;position:absolute;opacity:0;-webkit-box-sizing:border-box;box-sizing:border-box;will-change:transform, opacity;pointer-events:none}.segment-button-indicator-background{width:100%;height:var(--indicator-height);-webkit-transform:var(--indicator-transform);transform:var(--indicator-transform);-webkit-box-shadow:var(--indicator-box-shadow);box-shadow:var(--indicator-box-shadow);pointer-events:none}.segment-button-indicator-animated{-webkit-transition:var(--indicator-transition);transition:var(--indicator-transition)}:host(.segment-button-checked) .segment-button-indicator{opacity:1}@media (prefers-reduced-motion: reduce){.segment-button-indicator-background{-webkit-transform:none;transform:none}.segment-button-indicator-animated{-webkit-transition:none;transition:none}}:host{--background:none;--background-checked:none;--background-hover:none;--background-hover-opacity:0;--background-focused:none;--background-focused-opacity:0;--border-radius:7px;--border-width:1px;--border-color:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.12);--border-style:solid;--indicator-box-shadow:0 0 5px rgba(0, 0, 0, 0.16);--indicator-color:var(--ion-color-step-350, var(--ion-background-color-step-350, var(--ion-background-color, #fff)));--indicator-height:100%;--indicator-transition:transform 260ms cubic-bezier(0.4, 0, 0.2, 1);--indicator-transform:none;--transition:100ms all linear;--padding-top:0;--padding-end:13px;--padding-bottom:0;--padding-start:13px;margin-top:2px;margin-bottom:2px;position:relative;-ms-flex-direction:row;flex-direction:row;min-width:70px;min-height:28px;-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0);font-size:13px;font-weight:450;line-height:37px}:host::before{margin-left:0;margin-right:0;margin-top:5px;margin-bottom:5px;-webkit-transition:160ms opacity ease-in-out;transition:160ms opacity ease-in-out;-webkit-transition-delay:100ms;transition-delay:100ms;border-left:var(--border-width) var(--border-style) var(--border-color);content:\\\"\\\";opacity:1;will-change:opacity}:host(:first-of-type)::before{border-left-color:transparent}:host(.segment-button-disabled){opacity:0.3}::slotted(ion-icon){font-size:24px}:host(.segment-button-layout-icon-start) ::slotted(ion-label){-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:0;margin-inline-end:0}:host(.segment-button-layout-icon-end) ::slotted(ion-label){-webkit-margin-start:0;margin-inline-start:0;-webkit-margin-end:2px;margin-inline-end:2px}.segment-button-indicator{-webkit-padding-start:2px;padding-inline-start:2px;-webkit-padding-end:2px;padding-inline-end:2px;left:0;right:0;top:0;bottom:0}.segment-button-indicator-background{border-radius:var(--border-radius);background:var(--indicator-color)}.segment-button-indicator-background{-webkit-transition:var(--indicator-transition);transition:var(--indicator-transition)}:host(.segment-button-checked)::before,:host(.segment-button-after-checked)::before{opacity:0}:host(.segment-button-checked){z-index:-1}:host(.segment-button-activated){--indicator-transform:scale(0.95)}:host(.ion-focused) .button-native{opacity:0.7}@media (any-hover: hover){:host(:hover) .button-native{opacity:0.5}:host(.segment-button-checked:hover) .button-native{opacity:1}}:host(.in-segment-color){background:none;color:var(--ion-text-color, #000)}:host(.in-segment-color) .segment-button-indicator-background{background:var(--ion-color-step-350, var(--ion-background-color-step-350, var(--ion-background-color, #fff)))}@media (any-hover: hover){:host(.in-segment-color:hover) .button-native,:host(.in-segment-color.segment-button-checked:hover) .button-native{color:var(--ion-text-color, #000)}}:host(.in-toolbar:not(.in-segment-color)){--background-checked:var(--ion-toolbar-segment-background-checked, none);--color:var(--ion-toolbar-segment-color, var(--ion-toolbar-color), initial);--color-checked:var(--ion-toolbar-segment-color-checked, var(--ion-toolbar-color), initial);--indicator-color:var(--ion-toolbar-segment-indicator-color, var(--ion-color-step-350, var(--ion-background-color-step-350, var(--ion-background-color, #fff))))}:host(.in-toolbar-color) .segment-button-indicator-background{background:var(--ion-color-contrast)}:host(.in-toolbar-color:not(.in-segment-color)) .button-native{color:var(--ion-color-contrast)}:host(.in-toolbar-color.segment-button-checked:not(.in-segment-color)) .button-native{color:var(--ion-color-base)}@media (any-hover: hover){:host(.in-toolbar-color:not(.in-segment-color):hover) .button-native{color:var(--ion-color-contrast)}:host(.in-toolbar-color.segment-button-checked:not(.in-segment-color):hover) .button-native{color:var(--ion-color-base)}}\";\nconst IonSegmentButtonIosStyle0 = segmentButtonIosCss;\n\nconst segmentButtonMdCss = \":host{--color:initial;--color-hover:var(--color);--color-checked:var(--color);--color-disabled:var(--color);--padding-start:0;--padding-end:0;--padding-top:0;--padding-bottom:0;border-radius:var(--border-radius);display:-ms-flexbox;display:flex;position:relative;-ms-flex-direction:column;flex-direction:column;height:auto;background:var(--background);color:var(--color);text-decoration:none;text-overflow:ellipsis;white-space:nowrap;cursor:pointer;grid-row:1;-webkit-font-kerning:none;font-kerning:none}.button-native{border-radius:0;font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;-webkit-margin-start:var(--margin-start);margin-inline-start:var(--margin-start);-webkit-margin-end:var(--margin-end);margin-inline-end:var(--margin-end);margin-top:var(--margin-top);margin-bottom:var(--margin-bottom);-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);-webkit-transform:translate3d(0,  0,  0);transform:translate3d(0,  0,  0);display:-ms-flexbox;display:flex;position:relative;-ms-flex-direction:inherit;flex-direction:inherit;-ms-flex-positive:1;flex-grow:1;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;min-width:inherit;max-width:inherit;height:auto;min-height:inherit;max-height:inherit;-webkit-transition:var(--transition);transition:var(--transition);border:none;outline:none;background:transparent;contain:content;pointer-events:none;overflow:hidden;z-index:2}.button-native::after{left:0;right:0;top:0;bottom:0;position:absolute;content:\\\"\\\";opacity:0}.button-inner{display:-ms-flexbox;display:flex;position:relative;-ms-flex-flow:inherit;flex-flow:inherit;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:100%;z-index:1}:host(.segment-button-checked){background:var(--background-checked);color:var(--color-checked)}:host(.segment-button-disabled){cursor:default;pointer-events:none}:host(.ion-focused) .button-native{color:var(--color-focused)}:host(.ion-focused) .button-native::after{background:var(--background-focused);opacity:var(--background-focused-opacity)}:host(:focus){outline:none}@media (any-hover: hover){:host(:hover) .button-native{color:var(--color-hover)}:host(:hover) .button-native::after{background:var(--background-hover);opacity:var(--background-hover-opacity)}:host(.segment-button-checked:hover) .button-native{color:var(--color-checked)}}::slotted(ion-icon){-ms-flex-negative:0;flex-shrink:0;-ms-flex-order:-1;order:-1;pointer-events:none}::slotted(ion-label){display:block;-ms-flex-item-align:center;align-self:center;max-width:100%;line-height:22px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;-webkit-box-sizing:border-box;box-sizing:border-box;pointer-events:none}:host(.segment-button-layout-icon-top) .button-native{-ms-flex-direction:column;flex-direction:column}:host(.segment-button-layout-icon-start) .button-native{-ms-flex-direction:row;flex-direction:row}:host(.segment-button-layout-icon-end) .button-native{-ms-flex-direction:row-reverse;flex-direction:row-reverse}:host(.segment-button-layout-icon-bottom) .button-native{-ms-flex-direction:column-reverse;flex-direction:column-reverse}:host(.segment-button-layout-icon-hide) ::slotted(ion-icon){display:none}:host(.segment-button-layout-label-hide) ::slotted(ion-label){display:none}ion-ripple-effect{color:var(--ripple-color, var(--color-checked))}.segment-button-indicator{-webkit-transform-origin:left;transform-origin:left;position:absolute;opacity:0;-webkit-box-sizing:border-box;box-sizing:border-box;will-change:transform, opacity;pointer-events:none}.segment-button-indicator-background{width:100%;height:var(--indicator-height);-webkit-transform:var(--indicator-transform);transform:var(--indicator-transform);-webkit-box-shadow:var(--indicator-box-shadow);box-shadow:var(--indicator-box-shadow);pointer-events:none}.segment-button-indicator-animated{-webkit-transition:var(--indicator-transition);transition:var(--indicator-transition)}:host(.segment-button-checked) .segment-button-indicator{opacity:1}@media (prefers-reduced-motion: reduce){.segment-button-indicator-background{-webkit-transform:none;transform:none}.segment-button-indicator-animated{-webkit-transition:none;transition:none}}:host{--background:none;--background-checked:none;--background-hover:var(--color-checked);--background-focused:var(--color-checked);--background-activated-opacity:0;--background-focused-opacity:.12;--background-hover-opacity:.04;--color:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.6);--color-checked:var(--ion-color-primary, #0054e9);--indicator-box-shadow:none;--indicator-color:var(--color-checked);--indicator-height:2px;--indicator-transition:transform 250ms cubic-bezier(0.4, 0, 0.2, 1);--indicator-transform:none;--padding-top:0;--padding-end:16px;--padding-bottom:0;--padding-start:16px;--transition:color 0.15s linear 0s, opacity 0.15s linear 0s;min-width:90px;min-height:48px;border-width:var(--border-width);border-style:var(--border-style);border-color:var(--border-color);font-size:14px;font-weight:500;letter-spacing:0.06em;line-height:40px;text-transform:uppercase}:host(.segment-button-disabled){opacity:0.3}:host(.in-segment-color){background:none;color:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.6)}:host(.in-segment-color) ion-ripple-effect{color:var(--ion-color-base)}:host(.in-segment-color) .segment-button-indicator-background{background:var(--ion-color-base)}:host(.in-segment-color.segment-button-checked) .button-native{color:var(--ion-color-base)}:host(.in-segment-color.ion-focused) .button-native::after{background:var(--ion-color-base)}@media (any-hover: hover){:host(.in-segment-color:hover) .button-native{color:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.6)}:host(.in-segment-color:hover) .button-native::after{background:var(--ion-color-base)}:host(.in-segment-color.segment-button-checked:hover) .button-native{color:var(--ion-color-base)}}:host(.in-toolbar:not(.in-segment-color)){--background:var(--ion-toolbar-segment-background, none);--background-checked:var(--ion-toolbar-segment-background-checked, none);--color:var(--ion-toolbar-segment-color, rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.6));--color-checked:var(--ion-toolbar-segment-color-checked, var(--ion-color-primary, #0054e9));--indicator-color:var(--ion-toolbar-segment-color-checked, var(--color-checked))}:host(.in-toolbar-color:not(.in-segment-color)) .button-native{color:rgba(var(--ion-color-contrast-rgb), 0.6)}:host(.in-toolbar-color.segment-button-checked:not(.in-segment-color)) .button-native{color:var(--ion-color-contrast)}@media (any-hover: hover){:host(.in-toolbar-color:not(.in-segment-color)) .button-native::after{background:var(--ion-color-contrast)}}::slotted(ion-icon){margin-top:12px;margin-bottom:12px;font-size:24px}::slotted(ion-label){margin-top:12px;margin-bottom:12px}:host(.segment-button-layout-icon-top) ::slotted(ion-label),:host(.segment-button-layout-icon-bottom) ::slotted(ion-icon){margin-top:0}:host(.segment-button-layout-icon-top) ::slotted(ion-icon),:host(.segment-button-layout-icon-bottom) ::slotted(ion-label){margin-bottom:0}:host(.segment-button-layout-icon-start) ::slotted(ion-label){-webkit-margin-start:8px;margin-inline-start:8px;-webkit-margin-end:0;margin-inline-end:0}:host(.segment-button-layout-icon-end) ::slotted(ion-label){-webkit-margin-start:0;margin-inline-start:0;-webkit-margin-end:8px;margin-inline-end:8px}:host(.segment-button-has-icon-only) ::slotted(ion-icon){margin-top:12px;margin-bottom:12px}:host(.segment-button-has-label-only) ::slotted(ion-label){margin-top:12px;margin-bottom:12px}.segment-button-indicator{left:0;right:0;bottom:0}.segment-button-indicator-background{background:var(--indicator-color)}:host(.in-toolbar:not(.in-segment-color)) .segment-button-indicator-background{background:var(--ion-toolbar-segment-indicator-color, var(--indicator-color))}:host(.in-toolbar-color:not(.in-segment-color)) .segment-button-indicator-background{background:var(--ion-color-contrast)}\";\nconst IonSegmentButtonMdStyle0 = segmentButtonMdCss;\n\nlet ids = 0;\nconst SegmentButton = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.segmentEl = null;\n        this.inheritedAttributes = {};\n        this.updateStyle = () => {\n            forceUpdate(this);\n        };\n        this.updateState = () => {\n            const { segmentEl } = this;\n            if (segmentEl) {\n                this.checked = segmentEl.value === this.value;\n                if (segmentEl.disabled) {\n                    this.disabled = true;\n                }\n            }\n        };\n        this.checked = false;\n        this.contentId = undefined;\n        this.disabled = false;\n        this.layout = 'icon-top';\n        this.type = 'button';\n        this.value = 'ion-sb-' + ids++;\n    }\n    valueChanged() {\n        this.updateState();\n    }\n    connectedCallback() {\n        const segmentEl = (this.segmentEl = this.el.closest('ion-segment'));\n        if (segmentEl) {\n            this.updateState();\n            addEventListener(segmentEl, 'ionSelect', this.updateState);\n            addEventListener(segmentEl, 'ionStyle', this.updateStyle);\n        }\n        // Return if there is no contentId defined\n        if (!this.contentId)\n            return;\n        // Attempt to find the Segment Content by its contentId\n        const segmentContent = document.getElementById(this.contentId);\n        // If no associated Segment Content exists, log an error and return\n        if (!segmentContent) {\n            console.error(`Segment Button: Unable to find Segment Content with id=\"${this.contentId}\".`);\n            return;\n        }\n        // Ensure the found element is a valid ION-SEGMENT-CONTENT\n        if (segmentContent.tagName !== 'ION-SEGMENT-CONTENT') {\n            console.error(`Segment Button: Element with id=\"${this.contentId}\" is not an <ion-segment-content> element.`);\n            return;\n        }\n        // Prevent buttons from being disabled when associated with segment content\n        if (this.disabled) {\n            console.warn(`Segment Button: Segment buttons cannot be disabled when associated with an <ion-segment-content>.`);\n            this.disabled = false;\n        }\n    }\n    disconnectedCallback() {\n        const segmentEl = this.segmentEl;\n        if (segmentEl) {\n            removeEventListener(segmentEl, 'ionSelect', this.updateState);\n            removeEventListener(segmentEl, 'ionStyle', this.updateStyle);\n            this.segmentEl = null;\n        }\n    }\n    componentWillLoad() {\n        this.inheritedAttributes = Object.assign({}, inheritAttributes(this.el, ['aria-label']));\n    }\n    get hasLabel() {\n        return !!this.el.querySelector('ion-label');\n    }\n    get hasIcon() {\n        return !!this.el.querySelector('ion-icon');\n    }\n    /**\n     * @internal\n     * Focuses the native <button> element\n     * inside of ion-segment-button.\n     */\n    async setFocus() {\n        const { nativeEl } = this;\n        if (nativeEl !== undefined) {\n            nativeEl.focus();\n        }\n    }\n    render() {\n        const { checked, type, disabled, hasIcon, hasLabel, layout, segmentEl } = this;\n        const mode = getIonMode(this);\n        const hasSegmentColor = () => (segmentEl === null || segmentEl === void 0 ? void 0 : segmentEl.color) !== undefined;\n        return (h(Host, { key: 'd50a5d5e2f6206e8523598f258d8217d2903f69b', class: {\n                [mode]: true,\n                'in-toolbar': hostContext('ion-toolbar', this.el),\n                'in-toolbar-color': hostContext('ion-toolbar[color]', this.el),\n                'in-segment': hostContext('ion-segment', this.el),\n                'in-segment-color': hasSegmentColor(),\n                'segment-button-has-label': hasLabel,\n                'segment-button-has-icon': hasIcon,\n                'segment-button-has-label-only': hasLabel && !hasIcon,\n                'segment-button-has-icon-only': hasIcon && !hasLabel,\n                'segment-button-disabled': disabled,\n                'segment-button-checked': checked,\n                [`segment-button-layout-${layout}`]: true,\n                'ion-activatable': true,\n                'ion-activatable-instant': true,\n                'ion-focusable': true,\n            } }, h(\"button\", Object.assign({ key: 'b4f6f145286ba8ab79669e11035b906daa85ae7e', \"aria-selected\": checked ? 'true' : 'false', role: \"tab\", ref: (el) => (this.nativeEl = el), type: type, class: \"button-native\", part: \"native\", disabled: disabled }, this.inheritedAttributes), h(\"span\", { key: '67965996c9ffe70553875e00d3da0ae5b2b1d814', class: \"button-inner\" }, h(\"slot\", { key: '5087988fe45a8fdf388ec44c395d0b745b207806' })), mode === 'md' && h(\"ion-ripple-effect\", { key: 'b24858de0750bbc769b3183fac0077dfe817ba27' })), h(\"div\", { key: '97b4359432acd1c9da0816360cd1df9472e183f7', part: \"indicator\", class: \"segment-button-indicator segment-button-indicator-animated\" }, h(\"div\", { key: '0561738ea15b0986f4ed3d8276d5e6f2d13f7e51', part: \"indicator-background\", class: \"segment-button-indicator-background\" }))));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"value\": [\"valueChanged\"]\n    }; }\n};\nSegmentButton.style = {\n    ios: IonSegmentButtonIosStyle0,\n    md: IonSegmentButtonMdStyle0\n};\n\nexport { Segment as ion_segment, SegmentButton as ion_segment_button };\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nconst hostContext = (selector, el) => {\n    return el.closest(selector) !== null;\n};\n/**\n * Create the mode and color classes for the component based on the classes passed in\n */\nconst createColorClasses = (color, cssClassMap) => {\n    return typeof color === 'string' && color.length > 0\n        ? Object.assign({ 'ion-color': true, [`ion-color-${color}`]: true }, cssClassMap) : cssClassMap;\n};\nconst getClassList = (classes) => {\n    if (classes !== undefined) {\n        const array = Array.isArray(classes) ? classes : classes.split(' ');\n        return array\n            .filter((c) => c != null)\n            .map((c) => c.trim())\n            .filter((c) => c !== '');\n    }\n    return [];\n};\nconst getClassMap = (classes) => {\n    const map = {};\n    getClassList(classes).forEach((c) => (map[c] = true));\n    return map;\n};\nconst SCHEME = /^[a-z][a-z0-9+\\-.]*:/;\nconst openURL = async (url, ev, direction, animation) => {\n    if (url != null && url[0] !== '#' && !SCHEME.test(url)) {\n        const router = document.querySelector('ion-router');\n        if (router) {\n            if (ev != null) {\n                ev.preventDefault();\n            }\n            return router.push(url, direction, animation);\n        }\n    }\n    return false;\n};\n\nexport { createColorClasses as c, getClassMap as g, hostContext as h, openURL as o };\n"],"x_google_ignoreList":[0,1]}