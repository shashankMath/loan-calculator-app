{"version":3,"file":"6034.37f20f4dc964c915.js","mappings":"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","names":["InfiniteScroll","constructor","hostRef","registerInstance","this","ionInfinite","createEvent","thrPx","thrPc","didFire","isBusy","onScroll","scrollEl","canStart","infiniteHeight","el","offsetHeight","scrollTop","height","threshold","position","scrollHeight","isLoading","emit","disabled","thresholdChanged","val","lastIndexOf","parseFloat","disabledChanged","enableScrollEvents","connectedCallback","_this","_asyncToGenerator","contentEl","findClosestIonContent","getScrollElement","writeTask","clientHeight","printIonContentErrorMsg","disconnectedCallback","undefined","complete","_this2","prev","requestAnimationFrame","readTask","newScrollTop","shouldListen","addEventListener","removeEventListener","render","mode","getIonMode","h","Host","key","class","i","getElement","watchers","style","InfiniteScrollContent","customHTMLEnabled","config","get","ENABLE_HTML_CONTENT_DEFAULT","loadingSpinner","loadingText","componentDidLoad","renderLoadingText","innerHTML","sanitizeDOMString","name","ios","md"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@ionic/core/dist/esm/ion-infinite-scroll_2.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, d as createEvent, w as writeTask, e as readTask, h, i as getElement, f as Host } from './index-28849c61.js';\nimport { f as findClosestIonContent, p as printIonContentErrorMsg, g as getScrollElement } from './index-5cc724f3.js';\nimport { b as getIonMode, c as config } from './ionic-global-c81d82ab.js';\nimport { E as ENABLE_HTML_CONTENT_DEFAULT, a as sanitizeDOMString } from './config-49c88215.js';\nimport './helpers-da915de8.js';\nimport './index-9b0d46f4.js';\n\nconst infiniteScrollCss = \"ion-infinite-scroll{display:none;width:100%}.infinite-scroll-enabled{display:block}\";\nconst IonInfiniteScrollStyle0 = infiniteScrollCss;\n\nconst InfiniteScroll = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionInfinite = createEvent(this, \"ionInfinite\", 7);\n        this.thrPx = 0;\n        this.thrPc = 0;\n        /**\n         * didFire exists so that ionInfinite\n         * does not fire multiple times if\n         * users continue to scroll after\n         * scrolling into the infinite\n         * scroll threshold.\n         */\n        this.didFire = false;\n        this.isBusy = false;\n        this.onScroll = () => {\n            const scrollEl = this.scrollEl;\n            if (!scrollEl || !this.canStart()) {\n                return 1;\n            }\n            const infiniteHeight = this.el.offsetHeight;\n            if (infiniteHeight === 0) {\n                // if there is no height of this element then do nothing\n                return 2;\n            }\n            const scrollTop = scrollEl.scrollTop;\n            const scrollHeight = scrollEl.scrollHeight;\n            const height = scrollEl.offsetHeight;\n            const threshold = this.thrPc !== 0 ? height * this.thrPc : this.thrPx;\n            const distanceFromInfinite = this.position === 'bottom'\n                ? scrollHeight - infiniteHeight - scrollTop - threshold - height\n                : scrollTop - infiniteHeight - threshold;\n            if (distanceFromInfinite < 0) {\n                if (!this.didFire) {\n                    this.isLoading = true;\n                    this.didFire = true;\n                    this.ionInfinite.emit();\n                    return 3;\n                }\n            }\n            return 4;\n        };\n        this.isLoading = false;\n        this.threshold = '15%';\n        this.disabled = false;\n        this.position = 'bottom';\n    }\n    thresholdChanged() {\n        const val = this.threshold;\n        if (val.lastIndexOf('%') > -1) {\n            this.thrPx = 0;\n            this.thrPc = parseFloat(val) / 100;\n        }\n        else {\n            this.thrPx = parseFloat(val);\n            this.thrPc = 0;\n        }\n    }\n    disabledChanged() {\n        const disabled = this.disabled;\n        if (disabled) {\n            this.isLoading = false;\n            this.isBusy = false;\n        }\n        this.enableScrollEvents(!disabled);\n    }\n    async connectedCallback() {\n        const contentEl = findClosestIonContent(this.el);\n        if (!contentEl) {\n            printIonContentErrorMsg(this.el);\n            return;\n        }\n        this.scrollEl = await getScrollElement(contentEl);\n        this.thresholdChanged();\n        this.disabledChanged();\n        if (this.position === 'top') {\n            writeTask(() => {\n                if (this.scrollEl) {\n                    this.scrollEl.scrollTop = this.scrollEl.scrollHeight - this.scrollEl.clientHeight;\n                }\n            });\n        }\n    }\n    disconnectedCallback() {\n        this.enableScrollEvents(false);\n        this.scrollEl = undefined;\n    }\n    /**\n     * Call `complete()` within the `ionInfinite` output event handler when\n     * your async operation has completed. For example, the `loading`\n     * state is while the app is performing an asynchronous operation,\n     * such as receiving more data from an AJAX request to add more items\n     * to a data list. Once the data has been received and UI updated, you\n     * then call this method to signify that the loading has completed.\n     * This method will change the infinite scroll's state from `loading`\n     * to `enabled`.\n     */\n    async complete() {\n        const scrollEl = this.scrollEl;\n        if (!this.isLoading || !scrollEl) {\n            return;\n        }\n        this.isLoading = false;\n        if (this.position === 'top') {\n            /**\n             * New content is being added at the top, but the scrollTop position stays the same,\n             * which causes a scroll jump visually. This algorithm makes sure to prevent this.\n             * (Frame 1)\n             *    - complete() is called, but the UI hasn't had time to update yet.\n             *    - Save the current content dimensions.\n             *    - Wait for the next frame using _dom.read, so the UI will be updated.\n             * (Frame 2)\n             *    - Read the new content dimensions.\n             *    - Calculate the height difference and the new scroll position.\n             *    - Delay the scroll position change until other possible dom reads are done using _dom.write to be performant.\n             * (Still frame 2, if I'm correct)\n             *    - Change the scroll position (= visually maintain the scroll position).\n             *    - Change the state to re-enable the InfiniteScroll.\n             *    - This should be after changing the scroll position, or it could\n             *    cause the InfiniteScroll to be triggered again immediately.\n             * (Frame 3)\n             *    Done.\n             */\n            this.isBusy = true;\n            // ******** DOM READ ****************\n            // Save the current content dimensions before the UI updates\n            const prev = scrollEl.scrollHeight - scrollEl.scrollTop;\n            // ******** DOM READ ****************\n            requestAnimationFrame(() => {\n                readTask(() => {\n                    // UI has updated, save the new content dimensions\n                    const scrollHeight = scrollEl.scrollHeight;\n                    // New content was added on top, so the scroll position should be changed immediately to prevent it from jumping around\n                    const newScrollTop = scrollHeight - prev;\n                    // ******** DOM WRITE ****************\n                    requestAnimationFrame(() => {\n                        writeTask(() => {\n                            scrollEl.scrollTop = newScrollTop;\n                            this.isBusy = false;\n                            this.didFire = false;\n                        });\n                    });\n                });\n            });\n        }\n        else {\n            this.didFire = false;\n        }\n    }\n    canStart() {\n        return !this.disabled && !this.isBusy && !!this.scrollEl && !this.isLoading;\n    }\n    enableScrollEvents(shouldListen) {\n        if (this.scrollEl) {\n            if (shouldListen) {\n                this.scrollEl.addEventListener('scroll', this.onScroll);\n            }\n            else {\n                this.scrollEl.removeEventListener('scroll', this.onScroll);\n            }\n        }\n    }\n    render() {\n        const mode = getIonMode(this);\n        const disabled = this.disabled;\n        return (h(Host, { key: 'e844956795f69be33396ce4480aa7a54ad01b28c', class: {\n                [mode]: true,\n                'infinite-scroll-loading': this.isLoading,\n                'infinite-scroll-enabled': !disabled,\n            } }));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"threshold\": [\"thresholdChanged\"],\n        \"disabled\": [\"disabledChanged\"]\n    }; }\n};\nInfiniteScroll.style = IonInfiniteScrollStyle0;\n\nconst infiniteScrollContentIosCss = \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px;margin-top:4px;margin-bottom:0}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-ios .infinite-loading-text{color:var(--ion-color-step-600, var(--ion-text-color-step-400, #666666))}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-small-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-crescent circle{stroke:var(--ion-color-step-600, var(--ion-text-color-step-400, #666666))}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600, var(--ion-text-color-step-400, #666666))}\";\nconst IonInfiniteScrollContentIosStyle0 = infiniteScrollContentIosCss;\n\nconst infiniteScrollContentMdCss = \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px;margin-top:4px;margin-bottom:0}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-md .infinite-loading-text{color:var(--ion-color-step-600, var(--ion-text-color-step-400, #666666))}.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-small-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-crescent circle{stroke:var(--ion-color-step-600, var(--ion-text-color-step-400, #666666))}.infinite-scroll-content-md .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600, var(--ion-text-color-step-400, #666666))}\";\nconst IonInfiniteScrollContentMdStyle0 = infiniteScrollContentMdCss;\n\nconst InfiniteScrollContent = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.customHTMLEnabled = config.get('innerHTMLTemplatesEnabled', ENABLE_HTML_CONTENT_DEFAULT);\n        this.loadingSpinner = undefined;\n        this.loadingText = undefined;\n    }\n    componentDidLoad() {\n        if (this.loadingSpinner === undefined) {\n            const mode = getIonMode(this);\n            this.loadingSpinner = config.get('infiniteLoadingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'crescent'));\n        }\n    }\n    renderLoadingText() {\n        const { customHTMLEnabled, loadingText } = this;\n        if (customHTMLEnabled) {\n            return h(\"div\", { class: \"infinite-loading-text\", innerHTML: sanitizeDOMString(loadingText) });\n        }\n        return h(\"div\", { class: \"infinite-loading-text\" }, this.loadingText);\n    }\n    render() {\n        const mode = getIonMode(this);\n        return (h(Host, { key: '7c16060dcfe2a0b0fb3e2f8f4c449589a76f1baa', class: {\n                [mode]: true,\n                // Used internally for styling\n                [`infinite-scroll-content-${mode}`]: true,\n            } }, h(\"div\", { key: 'a94f4d8746e053dc718f97520bd7e48cb316443a', class: \"infinite-loading\" }, this.loadingSpinner && (h(\"div\", { key: '10143d5d2a50a2a2bc5de1cee8e7ab51263bcf23', class: \"infinite-loading-spinner\" }, h(\"ion-spinner\", { key: '8846e88191690d9c61a0b462889ed56fbfed8b0d', name: this.loadingSpinner }))), this.loadingText !== undefined && this.renderLoadingText())));\n    }\n};\nInfiniteScrollContent.style = {\n    ios: IonInfiniteScrollContentIosStyle0,\n    md: IonInfiniteScrollContentMdStyle0\n};\n\nexport { InfiniteScroll as ion_infinite_scroll, InfiniteScrollContent as ion_infinite_scroll_content };\n"],"x_google_ignoreList":[0]}