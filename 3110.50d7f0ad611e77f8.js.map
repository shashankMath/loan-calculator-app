{"version":3,"file":"3110.50d7f0ad611e77f8.js","mappings":"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","names":["PickerColumn","constructor","hostRef","registerInstance","this","ionChange","createEvent","isScrolling","isColumnVisible","canExitInputMode","updateValueTextOnScroll","centerPickerItemInView","target","smooth","scrollEl","top","offsetTop","clientHeight","scrollTop","scroll","left","behavior","undefined","setPickerItemActiveState","item","isActive","classList","add","PICKER_ITEM_ACTIVE_CLASS","remove","inputModeChange","ev","numericInput","useInputMode","inputModeColumn","detail","setInputModeActive","el","state","scrollEndCallback","initializeScrollListener","enableHaptics","isPlatform","timeout","activeEl","activeItem","scrollCallback","raf","_a","clearTimeout","hapticSelectionStart","bbox","getBoundingClientRect","centerX","x","width","centerY","y","height","rootNode","getRootNode","referenceNode","ShadowRoot","doc","newActiveElement","elementsFromPoint","find","tagName","disabled","hapticSelectionChanged","exitInputMode","assistiveFocusable","setAttribute","getOptionValueText","setTimeout","hapticSelectionEnd","setValue","value","addEventListener","destroyScrollListener","removeEventListener","parentEl","findNextOption","stride","prevNode","node","nextElementSibling","findPreviousOption","nextNode","previousElementSibling","onKeyDown","mobile","newOption","key","querySelector","preventDefault","getAttribute","innerText","renderAssistiveFocusable","valueText","h","ref","class","role","tabindex","ariaLabel","color","ariaLabelChanged","newValue","valueChange","scrollActiveItemIntoView","componentWillLoad","closest","IntersectionObserver","entries","length","isIntersecting","oldActive","getElementRoot","threshold","root","observe","componentDidRender","firstOption","_this","_asyncToGenerator","_this2","emit","setFocus","_this3","focus","connectedCallback","Array","from","querySelectorAll","option","render","mode","getIonMode","Host","createColorClasses","n","name","tabIndex","getElement","watchers","style","hostContext","selector","cssClassMap","Object","assign","getClassMap","classes","map","getClassList","isArray","split","filter","c","trim","forEach","SCHEME","openURL","_ref","url","direction","animation","test","router","document","push","_x","_x2","_x3","_x4","apply","arguments"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@ionic/core/dist/esm/ion-picker-column.entry.js","./node_modules/@ionic/core/dist/esm/theme-01f3f29c.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, d as createEvent, h, f as Host, i as getElement } from './index-28849c61.js';\nimport { d as doc } from './index-a5d50daf.js';\nimport { r as raf, g as getElementRoot } from './helpers-da915de8.js';\nimport { a as hapticSelectionStart, b as hapticSelectionChanged, h as hapticSelectionEnd } from './haptic-ac164e4c.js';\nimport { a as isPlatform, b as getIonMode } from './ionic-global-c81d82ab.js';\nimport { c as createColorClasses } from './theme-01f3f29c.js';\nimport './capacitor-59395cbd.js';\n\nconst pickerColumnCss = \":host{display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;max-width:100%;height:200px;font-size:22px;text-align:center}.assistive-focusable{left:0;right:0;top:0;bottom:0;position:absolute;z-index:1;pointer-events:none}.assistive-focusable:focus{outline:none}.picker-opts{-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px;padding-top:0px;padding-bottom:0px;min-width:26px;max-height:200px;outline:none;text-align:inherit;-webkit-scroll-snap-type:y mandatory;-ms-scroll-snap-type:y mandatory;scroll-snap-type:y mandatory;overflow-x:hidden;overflow-y:scroll;scrollbar-width:none}.picker-item-empty{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;display:block;width:100%;height:34px;border:0px;outline:none;background:transparent;color:inherit;font-family:var(--ion-font-family, inherit);font-size:inherit;line-height:34px;text-align:inherit;text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.picker-opts::-webkit-scrollbar{display:none}::slotted(ion-picker-column-option){display:block;scroll-snap-align:center}.picker-item-empty,:host(:not([disabled])) ::slotted(ion-picker-column-option.option-disabled){scroll-snap-align:none}::slotted([slot=prefix]),::slotted([slot=suffix]){max-width:200px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden}::slotted([slot=prefix]){-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px;padding-top:0;padding-bottom:0;-ms-flex-pack:end;justify-content:end}::slotted([slot=suffix]){-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px;padding-top:0;padding-bottom:0;-ms-flex-pack:start;justify-content:start}:host(.picker-column-disabled) .picker-opts{overflow-y:hidden}:host(.picker-column-disabled) ::slotted(ion-picker-column-option){cursor:default;opacity:0.4;pointer-events:none}@media (any-hover: hover){:host(:focus) .picker-opts{outline:none;background:rgba(var(--ion-color-base-rgb), 0.2)}}\";\nconst IonPickerColumnStyle0 = pickerColumnCss;\n\nconst PickerColumn = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionChange = createEvent(this, \"ionChange\", 7);\n        this.isScrolling = false;\n        this.isColumnVisible = false;\n        this.canExitInputMode = true;\n        this.updateValueTextOnScroll = false;\n        this.centerPickerItemInView = (target, smooth = true, canExitInputMode = true) => {\n            const { isColumnVisible, scrollEl } = this;\n            if (isColumnVisible && scrollEl) {\n                // (Vertical offset from parent) - (three empty picker rows) + (half the height of the target to ensure the scroll triggers)\n                const top = target.offsetTop - 3 * target.clientHeight + target.clientHeight / 2;\n                if (scrollEl.scrollTop !== top) {\n                    /**\n                     * Setting this flag prevents input\n                     * mode from exiting in the picker column's\n                     * scroll callback. This is useful when the user manually\n                     * taps an item or types on the keyboard as both\n                     * of these can cause a scroll to occur.\n                     */\n                    this.canExitInputMode = canExitInputMode;\n                    this.updateValueTextOnScroll = false;\n                    scrollEl.scroll({\n                        top,\n                        left: 0,\n                        behavior: smooth ? 'smooth' : undefined,\n                    });\n                }\n            }\n        };\n        this.setPickerItemActiveState = (item, isActive) => {\n            if (isActive) {\n                item.classList.add(PICKER_ITEM_ACTIVE_CLASS);\n            }\n            else {\n                item.classList.remove(PICKER_ITEM_ACTIVE_CLASS);\n            }\n        };\n        /**\n         * When ionInputModeChange is emitted, each column\n         * needs to check if it is the one being made available\n         * for text entry.\n         */\n        this.inputModeChange = (ev) => {\n            if (!this.numericInput) {\n                return;\n            }\n            const { useInputMode, inputModeColumn } = ev.detail;\n            /**\n             * If inputModeColumn is undefined then this means\n             * all numericInput columns are being selected.\n             */\n            const isColumnActive = inputModeColumn === undefined || inputModeColumn === this.el;\n            if (!useInputMode || !isColumnActive) {\n                this.setInputModeActive(false);\n                return;\n            }\n            this.setInputModeActive(true);\n        };\n        /**\n         * Setting isActive will cause a re-render.\n         * As a result, we do not want to cause the\n         * re-render mid scroll as this will cause\n         * the picker column to jump back to\n         * whatever value was selected at the\n         * start of the scroll interaction.\n         */\n        this.setInputModeActive = (state) => {\n            if (this.isScrolling) {\n                this.scrollEndCallback = () => {\n                    this.isActive = state;\n                };\n                return;\n            }\n            this.isActive = state;\n        };\n        /**\n         * When the column scrolls, the component\n         * needs to determine which item is centered\n         * in the view and will emit an ionChange with\n         * the item object.\n         */\n        this.initializeScrollListener = () => {\n            /**\n             * The haptics for the wheel picker are\n             * an iOS-only feature. As a result, they should\n             * be disabled on Android.\n             */\n            const enableHaptics = isPlatform('ios');\n            const { el, scrollEl } = this;\n            let timeout;\n            let activeEl = this.activeItem;\n            const scrollCallback = () => {\n                raf(() => {\n                    var _a;\n                    if (!scrollEl)\n                        return;\n                    if (timeout) {\n                        clearTimeout(timeout);\n                        timeout = undefined;\n                    }\n                    if (!this.isScrolling) {\n                        enableHaptics && hapticSelectionStart();\n                        this.isScrolling = true;\n                    }\n                    /**\n                     * Select item in the center of the column\n                     * which is the month/year that we want to select\n                     */\n                    const bbox = scrollEl.getBoundingClientRect();\n                    const centerX = bbox.x + bbox.width / 2;\n                    const centerY = bbox.y + bbox.height / 2;\n                    /**\n                     * elementFromPoint returns the top-most element.\n                     * This means that if an ion-backdrop is overlaying the\n                     * picker then the appropriate picker column option will\n                     * not be selected. To account for this, we use elementsFromPoint\n                     * and use an Array.find to find the appropriate column option\n                     * at that point.\n                     *\n                     * Additionally, the picker column could be used in the\n                     * Shadow DOM (i.e. in ion-datetime) so we need to make\n                     * sure we are choosing the correct host otherwise\n                     * the elements returns by elementsFromPoint will be\n                     * retargeted. To account for this, we check to see\n                     * if the picker column has a parent shadow root. If\n                     * so, we use that shadow root when doing elementsFromPoint.\n                     * Otherwise, we just use the document.\n                     */\n                    const rootNode = el.getRootNode();\n                    const hasParentShadow = rootNode instanceof ShadowRoot;\n                    const referenceNode = hasParentShadow ? rootNode : doc;\n                    /**\n                     * If the reference node is undefined\n                     * then it's likely that doc is undefined\n                     * due to being in an SSR environment.\n                     */\n                    if (referenceNode === undefined) {\n                        return;\n                    }\n                    const elementsAtPoint = referenceNode.elementsFromPoint(centerX, centerY);\n                    /**\n                     * elementsFromPoint can returns multiple elements\n                     * so find the relevant picker column option if one exists.\n                     */\n                    const newActiveElement = elementsAtPoint.find((el) => el.tagName === 'ION-PICKER-COLUMN-OPTION');\n                    if (activeEl !== undefined) {\n                        this.setPickerItemActiveState(activeEl, false);\n                    }\n                    if (newActiveElement === undefined || newActiveElement.disabled) {\n                        return;\n                    }\n                    /**\n                     * If we are selecting a new value,\n                     * we need to run haptics again.\n                     */\n                    if (newActiveElement !== activeEl) {\n                        enableHaptics && hapticSelectionChanged();\n                        if (this.canExitInputMode) {\n                            /**\n                             * The native iOS wheel picker\n                             * only dismisses the keyboard\n                             * once the selected item has changed\n                             * as a result of a swipe\n                             * from the user. If `canExitInputMode` is\n                             * `false` then this means that the\n                             * scroll is happening as a result of\n                             * the `value` property programmatically changing\n                             * either by an application or by the user via the keyboard.\n                             */\n                            this.exitInputMode();\n                        }\n                    }\n                    activeEl = newActiveElement;\n                    this.setPickerItemActiveState(newActiveElement, true);\n                    /**\n                     * Set the aria-valuetext even though the value prop has not been updated yet.\n                     * This enables some screen readers to announce the value as the users drag\n                     * as opposed to when their release their pointer from the screen.\n                     *\n                     * When the value is programmatically updated, we will smoothly scroll\n                     * to the new option. However, we do not want to update aria-valuetext mid-scroll\n                     * as that can cause the old value to be briefly set before being set to the\n                     * correct option. This will cause some screen readers to announce the old value\n                     * again before announcing the new value. The correct valuetext will be set on render.\n                     */\n                    if (this.updateValueTextOnScroll) {\n                        (_a = this.assistiveFocusable) === null || _a === void 0 ? void 0 : _a.setAttribute('aria-valuetext', this.getOptionValueText(newActiveElement));\n                    }\n                    timeout = setTimeout(() => {\n                        this.isScrolling = false;\n                        this.updateValueTextOnScroll = true;\n                        enableHaptics && hapticSelectionEnd();\n                        /**\n                         * Certain tasks (such as those that\n                         * cause re-renders) should only be done\n                         * once scrolling has finished, otherwise\n                         * flickering may occur.\n                         */\n                        const { scrollEndCallback } = this;\n                        if (scrollEndCallback) {\n                            scrollEndCallback();\n                            this.scrollEndCallback = undefined;\n                        }\n                        /**\n                         * Reset this flag as the\n                         * next scroll interaction could\n                         * be a scroll from the user. In this\n                         * case, we should exit input mode.\n                         */\n                        this.canExitInputMode = true;\n                        this.setValue(newActiveElement.value);\n                    }, 250);\n                });\n            };\n            /**\n             * Wrap this in an raf so that the scroll callback\n             * does not fire when component is initially shown.\n             */\n            raf(() => {\n                if (!scrollEl)\n                    return;\n                scrollEl.addEventListener('scroll', scrollCallback);\n                this.destroyScrollListener = () => {\n                    scrollEl.removeEventListener('scroll', scrollCallback);\n                };\n            });\n        };\n        /**\n         * Tells the parent picker to\n         * exit text entry mode. This is only called\n         * when the selected item changes during scroll, so\n         * we know that the user likely wants to scroll\n         * instead of type.\n         */\n        this.exitInputMode = () => {\n            const { parentEl } = this;\n            if (parentEl == null)\n                return;\n            parentEl.exitInputMode();\n            /**\n             * setInputModeActive only takes\n             * effect once scrolling stops to avoid\n             * a component re-render while scrolling.\n             * However, we want the visual active\n             * indicator to go away immediately, so\n             * we call classList.remove here.\n             */\n            this.el.classList.remove('picker-column-active');\n        };\n        /**\n         * Find the next enabled option after the active option.\n         * @param stride - How many options to \"jump\" over in order to select the next option.\n         * This can be used to implement PageUp/PageDown behaviors where pressing these keys\n         * scrolls the picker by more than 1 option. For example, a stride of 5 means select\n         * the enabled option 5 options after the active one. Note that the actual option selected\n         * may be past the stride if the option at the stride is disabled.\n         */\n        this.findNextOption = (stride = 1) => {\n            const { activeItem } = this;\n            if (!activeItem)\n                return null;\n            let prevNode = activeItem;\n            let node = activeItem.nextElementSibling;\n            while (node != null) {\n                if (stride > 0) {\n                    stride--;\n                }\n                if (node.tagName === 'ION-PICKER-COLUMN-OPTION' && !node.disabled && stride === 0) {\n                    return node;\n                }\n                prevNode = node;\n                // Use nextElementSibling instead of nextSibling to avoid text/comment nodes\n                node = node.nextElementSibling;\n            }\n            return prevNode;\n        };\n        /**\n         * Find the next enabled option after the active option.\n         * @param stride - How many options to \"jump\" over in order to select the next option.\n         * This can be used to implement PageUp/PageDown behaviors where pressing these keys\n         * scrolls the picker by more than 1 option. For example, a stride of 5 means select\n         * the enabled option 5 options before the active one. Note that the actual option selected\n         *  may be past the stride if the option at the stride is disabled.\n         */\n        this.findPreviousOption = (stride = 1) => {\n            const { activeItem } = this;\n            if (!activeItem)\n                return null;\n            let nextNode = activeItem;\n            let node = activeItem.previousElementSibling;\n            while (node != null) {\n                if (stride > 0) {\n                    stride--;\n                }\n                if (node.tagName === 'ION-PICKER-COLUMN-OPTION' && !node.disabled && stride === 0) {\n                    return node;\n                }\n                nextNode = node;\n                // Use previousElementSibling instead of previousSibling to avoid text/comment nodes\n                node = node.previousElementSibling;\n            }\n            return nextNode;\n        };\n        this.onKeyDown = (ev) => {\n            /**\n             * The below operations should be inverted when running on a mobile device.\n             * For example, swiping up will dispatch an \"ArrowUp\" event. On desktop,\n             * this should cause the previous option to be selected. On mobile, swiping\n             * up causes a view to scroll down. As a result, swiping up on mobile should\n             * cause the next option to be selected. The Home/End operations remain\n             * unchanged because those always represent the first/last options, respectively.\n             */\n            const mobile = isPlatform('mobile');\n            let newOption = null;\n            switch (ev.key) {\n                case 'ArrowDown':\n                    newOption = mobile ? this.findPreviousOption() : this.findNextOption();\n                    break;\n                case 'ArrowUp':\n                    newOption = mobile ? this.findNextOption() : this.findPreviousOption();\n                    break;\n                case 'PageUp':\n                    newOption = mobile ? this.findNextOption(5) : this.findPreviousOption(5);\n                    break;\n                case 'PageDown':\n                    newOption = mobile ? this.findPreviousOption(5) : this.findNextOption(5);\n                    break;\n                case 'Home':\n                    /**\n                     * There is no guarantee that the first child will be an ion-picker-column-option,\n                     * so we do not use firstElementChild.\n                     */\n                    newOption = this.el.querySelector('ion-picker-column-option:first-of-type');\n                    break;\n                case 'End':\n                    /**\n                     * There is no guarantee that the last child will be an ion-picker-column-option,\n                     * so we do not use lastElementChild.\n                     */\n                    newOption = this.el.querySelector('ion-picker-column-option:last-of-type');\n                    break;\n            }\n            if (newOption !== null) {\n                this.setValue(newOption.value);\n                // This stops any default browser behavior such as scrolling\n                ev.preventDefault();\n            }\n        };\n        /**\n         * Utility to generate the correct text for aria-valuetext.\n         */\n        this.getOptionValueText = (el) => {\n            var _a;\n            return el ? (_a = el.getAttribute('aria-label')) !== null && _a !== void 0 ? _a : el.innerText : '';\n        };\n        /**\n         * Render an element that overlays the column. This element is for assistive\n         * tech to allow users to navigate the column up/down. This element should receive\n         * focus as it listens for synthesized keyboard events as required by the\n         * slider role: https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/slider_role\n         */\n        this.renderAssistiveFocusable = () => {\n            const { activeItem } = this;\n            const valueText = this.getOptionValueText(activeItem);\n            /**\n             * When using the picker, the valuetext provides important context that valuenow\n             * does not. Additionally, using non-zero valuemin/valuemax values can cause\n             * WebKit to incorrectly announce numeric valuetext values (such as a year\n             * like \"2024\") as percentages: https://bugs.webkit.org/show_bug.cgi?id=273126\n             */\n            return (h(\"div\", { ref: (el) => (this.assistiveFocusable = el), class: \"assistive-focusable\", role: \"slider\", tabindex: this.disabled ? undefined : 0, \"aria-label\": this.ariaLabel, \"aria-valuemin\": 0, \"aria-valuemax\": 0, \"aria-valuenow\": 0, \"aria-valuetext\": valueText, \"aria-orientation\": \"vertical\", onKeyDown: (ev) => this.onKeyDown(ev) }));\n        };\n        this.ariaLabel = null;\n        this.isActive = false;\n        this.disabled = false;\n        this.value = undefined;\n        this.color = 'primary';\n        this.numericInput = false;\n    }\n    ariaLabelChanged(newValue) {\n        this.ariaLabel = newValue;\n    }\n    valueChange() {\n        if (this.isColumnVisible) {\n            /**\n             * Only scroll the active item into view when the picker column\n             * is actively visible to the user.\n             */\n            this.scrollActiveItemIntoView(true);\n        }\n    }\n    /**\n     * Only setup scroll listeners\n     * when the picker is visible, otherwise\n     * the container will have a scroll\n     * height of 0px.\n     */\n    componentWillLoad() {\n        /**\n         * We cache parentEl in a local variable\n         * so we don't need to keep accessing\n         * the class variable (which comes with\n         * a small performance hit)\n         */\n        const parentEl = (this.parentEl = this.el.closest('ion-picker'));\n        const visibleCallback = (entries) => {\n            /**\n             * Browsers will sometimes group multiple IO events into a single callback.\n             * As a result, we want to grab the last/most recent event in case there are multiple events.\n             */\n            const ev = entries[entries.length - 1];\n            if (ev.isIntersecting) {\n                const { activeItem, el } = this;\n                this.isColumnVisible = true;\n                /**\n                 * Because this initial call to scrollActiveItemIntoView has to fire before\n                 * the scroll listener is set up, we need to manage the active class manually.\n                 */\n                const oldActive = getElementRoot(el).querySelector(`.${PICKER_ITEM_ACTIVE_CLASS}`);\n                if (oldActive) {\n                    this.setPickerItemActiveState(oldActive, false);\n                }\n                this.scrollActiveItemIntoView();\n                if (activeItem) {\n                    this.setPickerItemActiveState(activeItem, true);\n                }\n                this.initializeScrollListener();\n            }\n            else {\n                this.isColumnVisible = false;\n                if (this.destroyScrollListener) {\n                    this.destroyScrollListener();\n                    this.destroyScrollListener = undefined;\n                }\n            }\n        };\n        /**\n         * Set the root to be the parent picker element\n         * This causes the IO callback\n         * to be fired in WebKit as soon as the element\n         * is visible. If we used the default root value\n         * then WebKit would only fire the IO callback\n         * after any animations (such as a modal transition)\n         * finished, and there would potentially be a flicker.\n         */\n        new IntersectionObserver(visibleCallback, { threshold: 0.001, root: this.parentEl }).observe(this.el);\n        if (parentEl !== null) {\n            // TODO(FW-2832): type\n            parentEl.addEventListener('ionInputModeChange', (ev) => this.inputModeChange(ev));\n        }\n    }\n    componentDidRender() {\n        const { el, activeItem, isColumnVisible, value } = this;\n        if (isColumnVisible && !activeItem) {\n            const firstOption = el.querySelector('ion-picker-column-option');\n            /**\n             * If the picker column does not have an active item and the current value\n             * does not match the first item in the picker column, that means\n             * the value is out of bounds. In this case, we assign the value to the\n             * first item to match the scroll position of the column.\n             *\n             */\n            if (firstOption !== null && firstOption.value !== value) {\n                this.setValue(firstOption.value);\n            }\n        }\n    }\n    /** @internal  */\n    async scrollActiveItemIntoView(smooth = false) {\n        const activeEl = this.activeItem;\n        if (activeEl) {\n            this.centerPickerItemInView(activeEl, smooth, false);\n        }\n    }\n    /**\n     * Sets the value prop and fires the ionChange event.\n     * This is used when we need to fire ionChange from\n     * user-generated events that cannot be caught with normal\n     * input/change event listeners.\n     * @internal\n     */\n    async setValue(value) {\n        if (this.disabled === true || this.value === value) {\n            return;\n        }\n        this.value = value;\n        this.ionChange.emit({ value });\n    }\n    /**\n     * Sets focus on the scrollable container within the picker column.\n     * Use this method instead of the global `pickerColumn.focus()`.\n     */\n    async setFocus() {\n        if (this.assistiveFocusable) {\n            this.assistiveFocusable.focus();\n        }\n    }\n    connectedCallback() {\n        var _a;\n        this.ariaLabel = (_a = this.el.getAttribute('aria-label')) !== null && _a !== void 0 ? _a : 'Select a value';\n    }\n    get activeItem() {\n        const { value } = this;\n        const options = Array.from(this.el.querySelectorAll('ion-picker-column-option'));\n        return options.find((option) => {\n            /**\n             * If the whole picker column is disabled, the current value should appear active\n             * If the current value item is specifically disabled, it should not appear active\n             */\n            if (!this.disabled && option.disabled) {\n                return false;\n            }\n            return option.value === value;\n        });\n    }\n    render() {\n        const { color, disabled, isActive, numericInput } = this;\n        const mode = getIonMode(this);\n        return (h(Host, { key: 'a221dc10f1eb7c41637a16d2c7167c16939822fd', class: createColorClasses(color, {\n                [mode]: true,\n                ['picker-column-active']: isActive,\n                ['picker-column-numeric-input']: numericInput,\n                ['picker-column-disabled']: disabled,\n            }) }, this.renderAssistiveFocusable(), h(\"slot\", { key: '81b0656f606856f3dc0a657bf167d81a5011405e', name: \"prefix\" }), h(\"div\", { key: '71b9de67c04150255dd66592601c9d926db0c31c', \"aria-hidden\": \"true\", class: \"picker-opts\", ref: (el) => {\n                this.scrollEl = el;\n            },\n            /**\n             * When an element has an overlay scroll style and\n             * a fixed height, Firefox will focus the scrollable\n             * container if the content exceeds the container's\n             * dimensions.\n             *\n             * This causes keyboard navigation to focus to this\n             * element instead of going to the next element in\n             * the tab order.\n             *\n             * The desired behavior is for the user to be able to\n             * focus the assistive focusable element and tab to\n             * the next element in the tab order. Instead of tabbing\n             * to this element.\n             *\n             * To prevent this, we set the tabIndex to -1. This\n             * will match the behavior of the other browsers.\n             */\n            tabIndex: -1 }, h(\"div\", { key: 'ebdc2f08c83db0cf17b4be29f28fcb00f529601e', class: \"picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\"), h(\"div\", { key: '04ab56fcb8e6a7d6af00204c4560feb99ff34a56', class: \"picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\"), h(\"div\", { key: '6cf8f538903faf0fe1e4130f3eaf7b4e2e17cb52', class: \"picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\"), h(\"slot\", { key: '1cc392307b70c576be5b81b5226ceba735957f0f' }), h(\"div\", { key: '23e3f28e2a99b9aa8b7c8f68ad9583e3ca63e9e2', class: \"picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\"), h(\"div\", { key: '8a0563f09780c3116af0caebe4f40587ec1f041f', class: \"picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\"), h(\"div\", { key: '13207e248fc0009f37e0c90a3ee2bac2f130b856', class: \"picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\")), h(\"slot\", { key: '55ecf2ab5f214f936c2468cbdb7952daf89416b8', name: \"suffix\" })));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"aria-label\": [\"ariaLabelChanged\"],\n        \"value\": [\"valueChange\"]\n    }; }\n};\nconst PICKER_ITEM_ACTIVE_CLASS = 'option-active';\nPickerColumn.style = IonPickerColumnStyle0;\n\nexport { PickerColumn as ion_picker_column };\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nconst hostContext = (selector, el) => {\n    return el.closest(selector) !== null;\n};\n/**\n * Create the mode and color classes for the component based on the classes passed in\n */\nconst createColorClasses = (color, cssClassMap) => {\n    return typeof color === 'string' && color.length > 0\n        ? Object.assign({ 'ion-color': true, [`ion-color-${color}`]: true }, cssClassMap) : cssClassMap;\n};\nconst getClassList = (classes) => {\n    if (classes !== undefined) {\n        const array = Array.isArray(classes) ? classes : classes.split(' ');\n        return array\n            .filter((c) => c != null)\n            .map((c) => c.trim())\n            .filter((c) => c !== '');\n    }\n    return [];\n};\nconst getClassMap = (classes) => {\n    const map = {};\n    getClassList(classes).forEach((c) => (map[c] = true));\n    return map;\n};\nconst SCHEME = /^[a-z][a-z0-9+\\-.]*:/;\nconst openURL = async (url, ev, direction, animation) => {\n    if (url != null && url[0] !== '#' && !SCHEME.test(url)) {\n        const router = document.querySelector('ion-router');\n        if (router) {\n            if (ev != null) {\n                ev.preventDefault();\n            }\n            return router.push(url, direction, animation);\n        }\n    }\n    return false;\n};\n\nexport { createColorClasses as c, getClassMap as g, hostContext as h, openURL as o };\n"],"x_google_ignoreList":[0,1]}