{"version":3,"file":"393.583138aa7a0e7690.js","mappings":"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","names":["ViewController","constructor","component","params","this","state","init","container","_this","_asyncToGenerator","element","attachComponent","delegate","_destroy","assert","removeViewFromDom","parentElement","remove","nav","undefined","matches","view","id","shallowEqualStringMap","convertToView","page","Nav","hostRef","registerInstance","ionNavWillLoad","createEvent","ionNavWillChange","ionNavDidChange","transInstr","gestureOrAnimationInProgress","useRouter","isTransitioning","destroyed","views","didLoad","swipeGesture","animated","animation","rootParams","root","swipeGestureChanged","gesture","enable","rootChanged","setRoot","componentWillLoad","document","querySelector","el","closest","mode","getIonMode","config","getBoolean","emit","componentDidLoad","_this2","__webpack_require__","e","then","bind","createSwipeBackGesture","canStart","onStart","onMove","onEnd","connectedCallback","disconnectedCallback","lifecycle","LIFECYCLE_WILL_UNLOAD","destroy","length","push","componentProps","opts","done","insert","insertIndex","insertPages","insertComponents","queueTrns","insertStart","insertViews","pop","removeIndex","popTo","indexOrViewCtrl","ti","removeStart","removeCount","removeView","popToRoot","startIndex","setPages","setRouteId","direction","active","getActiveSync","Promise","resolve","changed","promise","r","finish","commonOpts","updateURL","viewIsReady","enteringEl","mark","p","markVisible","_ref","apply","arguments","viewController","find","v","Object","assign","animationBuilder","getRouteId","_this3","tagName","getActive","_this4","getByIndex","index","_this5","canGoBack","_this6","canGoBackSync","getPrevious","_this7","getPreviousSync","getLength","_this8","indexOf","_this9","_a","_b","skipIfBusy","reject","router","canTransition","nextTrns","success","result","fireError","hasCompleted","requiresTransition","enteringView","leavingView","navChanged","failed","rejectReason","shift","runTransition","_this10","prepareTI","getEnteringView","Error","postViewInit","enteringRequiresTransition","leavingRequiresTransition","transition","_c","viewsLength","viewControllers","pages","map","filter","convertToViews","removeEnd","i","destroyQueue","finalNumViews","console","warn","insertViewAt","LIFECYCLE_WILL_LEAVE","LIFECYCLE_DID_LEAVE","destroyView","_this11","progressCallback","progressAnimation","ani","sbAni","onFinish","oneTimeCallback","progressEnd","leavingEl","animationOpts","showGoBack","baseEl","get","transitionFinish","activeView","unmountInactiveViews","existingIndex","splice","activeViewIndex","setPageHidden","stepValue","progressStep","shouldComplete","dur","newStepValue","getTimeGivenProgression","easing","render","h","key","getElement","watchers","style","NavLink","onClick","navLink","routerDirection","routerAnimation","Host"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@ionic/core/dist/esm/ion-nav_2.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, d as createEvent, h, i as getElement, f as Host } from './index-28849c61.js';\nimport { g as getTimeGivenProgression } from './cubic-bezier-fe2083dc.js';\nimport { m as assert, s as shallowEqualStringMap } from './helpers-da915de8.js';\nimport { l as lifecycle, t as transition, s as setPageHidden, d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './index-3ad7f18b.js';\nimport { b as getIonMode, c as config } from './ionic-global-c81d82ab.js';\nimport { a as attachComponent } from './framework-delegate-63d1a679.js';\nimport './index-9b0d46f4.js';\n\nconst VIEW_STATE_NEW = 1;\nconst VIEW_STATE_ATTACHED = 2;\nconst VIEW_STATE_DESTROYED = 3;\n// TODO(FW-2832): types\nclass ViewController {\n    constructor(component, params) {\n        this.component = component;\n        this.params = params;\n        this.state = VIEW_STATE_NEW;\n    }\n    async init(container) {\n        this.state = VIEW_STATE_ATTACHED;\n        if (!this.element) {\n            const component = this.component;\n            this.element = await attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params);\n        }\n    }\n    /**\n     * DOM WRITE\n     */\n    _destroy() {\n        assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\n        const element = this.element;\n        if (element) {\n            if (this.delegate) {\n                this.delegate.removeViewFromDom(element.parentElement, element);\n            }\n            else {\n                element.remove();\n            }\n        }\n        this.nav = undefined;\n        this.state = VIEW_STATE_DESTROYED;\n    }\n}\nconst matches = (view, id, params) => {\n    if (!view) {\n        return false;\n    }\n    if (view.component !== id) {\n        return false;\n    }\n    return shallowEqualStringMap(view.params, params);\n};\nconst convertToView = (page, params) => {\n    if (!page) {\n        return null;\n    }\n    if (page instanceof ViewController) {\n        return page;\n    }\n    return new ViewController(page, params);\n};\nconst convertToViews = (pages) => {\n    return pages\n        .map((page) => {\n        if (page instanceof ViewController) {\n            return page;\n        }\n        if ('component' in page) {\n            return convertToView(page.component, page.componentProps === null ? undefined : page.componentProps);\n        }\n        return convertToView(page, undefined);\n    })\n        .filter((v) => v !== null);\n};\n\nconst navCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;z-index:0}\";\nconst IonNavStyle0 = navCss;\n\nconst Nav = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\n        this.ionNavWillChange = createEvent(this, \"ionNavWillChange\", 3);\n        this.ionNavDidChange = createEvent(this, \"ionNavDidChange\", 3);\n        this.transInstr = [];\n        this.gestureOrAnimationInProgress = false;\n        this.useRouter = false;\n        this.isTransitioning = false;\n        this.destroyed = false;\n        this.views = [];\n        this.didLoad = false;\n        this.delegate = undefined;\n        this.swipeGesture = undefined;\n        this.animated = true;\n        this.animation = undefined;\n        this.rootParams = undefined;\n        this.root = undefined;\n    }\n    swipeGestureChanged() {\n        if (this.gesture) {\n            this.gesture.enable(this.swipeGesture === true);\n        }\n    }\n    rootChanged() {\n        if (this.root === undefined) {\n            return;\n        }\n        if (this.didLoad === false) {\n            /**\n             * If the component has not loaded yet, we can skip setting up the root component.\n             * It will be called when `componentDidLoad` fires.\n             */\n            return;\n        }\n        if (!this.useRouter) {\n            if (this.root !== undefined) {\n                this.setRoot(this.root, this.rootParams);\n            }\n        }\n    }\n    componentWillLoad() {\n        this.useRouter = document.querySelector('ion-router') !== null && this.el.closest('[no-router]') === null;\n        if (this.swipeGesture === undefined) {\n            const mode = getIonMode(this);\n            this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\n        }\n        this.ionNavWillLoad.emit();\n    }\n    async componentDidLoad() {\n        // We want to set this flag before any watch callbacks are manually called\n        this.didLoad = true;\n        this.rootChanged();\n        this.gesture = (await import('./swipe-back-e5394307.js')).createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\n        this.swipeGestureChanged();\n    }\n    connectedCallback() {\n        this.destroyed = false;\n    }\n    disconnectedCallback() {\n        for (const view of this.views) {\n            lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n            view._destroy();\n        }\n        // Release swipe back gesture and transition.\n        if (this.gesture) {\n            this.gesture.destroy();\n            this.gesture = undefined;\n        }\n        this.transInstr.length = 0;\n        this.views.length = 0;\n        this.destroyed = true;\n    }\n    /**\n     * Push a new component onto the current navigation stack. Pass any additional\n     * information along as an object. This additional information is accessible\n     * through NavParams.\n     *\n     * @param component The component to push onto the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    push(component, componentProps, opts, done) {\n        return this.insert(-1, component, componentProps, opts, done);\n    }\n    /**\n     * Inserts a component into the navigation stack at the specified index.\n     * This is useful to add a component at any point in the navigation stack.\n     *\n     * @param insertIndex The index to insert the component at in the stack.\n     * @param component The component to insert into the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    insert(insertIndex, component, componentProps, opts, done) {\n        return this.insertPages(insertIndex, [{ component, componentProps }], opts, done);\n    }\n    /**\n     * Inserts an array of components into the navigation stack at the specified index.\n     * The last component in the array will become instantiated as a view, and animate\n     * in to become the active view.\n     *\n     * @param insertIndex The index to insert the components at in the stack.\n     * @param insertComponents The components to insert into the navigation stack.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    insertPages(insertIndex, insertComponents, opts, done) {\n        return this.queueTrns({\n            insertStart: insertIndex,\n            insertViews: insertComponents,\n            opts,\n        }, done);\n    }\n    /**\n     * Pop a component off of the navigation stack. Navigates back from the current\n     * component.\n     *\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    pop(opts, done) {\n        return this.removeIndex(-1, 1, opts, done);\n    }\n    /**\n     * Pop to a specific index in the navigation stack.\n     *\n     * @param indexOrViewCtrl The index or view controller to pop to.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    popTo(indexOrViewCtrl, opts, done) {\n        const ti = {\n            removeStart: -1,\n            removeCount: -1,\n            opts,\n        };\n        if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\n            ti.removeView = indexOrViewCtrl;\n            ti.removeStart = 1;\n        }\n        else if (typeof indexOrViewCtrl === 'number') {\n            ti.removeStart = indexOrViewCtrl + 1;\n        }\n        return this.queueTrns(ti, done);\n    }\n    /**\n     * Navigate back to the root of the stack, no matter how far back that is.\n     *\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    popToRoot(opts, done) {\n        return this.removeIndex(1, -1, opts, done);\n    }\n    /**\n     * Removes a component from the navigation stack at the specified index.\n     *\n     * @param startIndex The number to begin removal at.\n     * @param removeCount The number of components to remove.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    removeIndex(startIndex, removeCount = 1, opts, done) {\n        return this.queueTrns({\n            removeStart: startIndex,\n            removeCount,\n            opts,\n        }, done);\n    }\n    /**\n     * Set the root for the current navigation stack to a component.\n     *\n     * @param component The component to set as the root of the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    setRoot(component, componentProps, opts, done) {\n        return this.setPages([{ component, componentProps }], opts, done);\n    }\n    /**\n     * Set the views of the current navigation stack and navigate to the last view.\n     * By default animations are disabled, but they can be enabled by passing options\n     * to the navigation controller. Navigation parameters can also be passed to the\n     * individual pages in the array.\n     *\n     * @param views The list of views to set as the navigation stack.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    setPages(views, opts, done) {\n        opts !== null && opts !== void 0 ? opts : (opts = {});\n        // if animation wasn't set to true then default it to NOT animate\n        if (opts.animated !== true) {\n            opts.animated = false;\n        }\n        return this.queueTrns({\n            insertStart: 0,\n            insertViews: views,\n            removeStart: 0,\n            removeCount: -1,\n            opts,\n        }, done);\n    }\n    /**\n     * Called by the router to update the view.\n     *\n     * @param id The component tag.\n     * @param params The component params.\n     * @param direction A direction hint.\n     * @param animation an AnimationBuilder.\n     *\n     * @return the status.\n     * @internal\n     */\n    setRouteId(id, params, direction, animation) {\n        const active = this.getActiveSync();\n        if (matches(active, id, params)) {\n            return Promise.resolve({\n                changed: false,\n                element: active.element,\n            });\n        }\n        let resolve;\n        const promise = new Promise((r) => (resolve = r));\n        let finish;\n        const commonOpts = {\n            updateURL: false,\n            viewIsReady: (enteringEl) => {\n                let mark;\n                const p = new Promise((r) => (mark = r));\n                resolve({\n                    changed: true,\n                    element: enteringEl,\n                    markVisible: async () => {\n                        mark();\n                        await finish;\n                    },\n                });\n                return p;\n            },\n        };\n        if (direction === 'root') {\n            finish = this.setRoot(id, params, commonOpts);\n        }\n        else {\n            // Look for a view matching the target in the view stack.\n            const viewController = this.views.find((v) => matches(v, id, params));\n            if (viewController) {\n                finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animationBuilder: animation }));\n            }\n            else if (direction === 'forward') {\n                finish = this.push(id, params, Object.assign(Object.assign({}, commonOpts), { animationBuilder: animation }));\n            }\n            else if (direction === 'back') {\n                finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animated: true, animationBuilder: animation }));\n            }\n        }\n        return promise;\n    }\n    /**\n     * Called by <ion-router> to retrieve the current component.\n     *\n     * @internal\n     */\n    async getRouteId() {\n        const active = this.getActiveSync();\n        if (active) {\n            return {\n                id: active.element.tagName,\n                params: active.params,\n                element: active.element,\n            };\n        }\n        return undefined;\n    }\n    /**\n     * Get the active view.\n     */\n    async getActive() {\n        return this.getActiveSync();\n    }\n    /**\n     * Get the view at the specified index.\n     *\n     * @param index The index of the view.\n     */\n    async getByIndex(index) {\n        return this.views[index];\n    }\n    /**\n     * Returns `true` if the current view can go back.\n     *\n     * @param view The view to check.\n     */\n    async canGoBack(view) {\n        return this.canGoBackSync(view);\n    }\n    /**\n     * Get the previous view.\n     *\n     * @param view The view to get.\n     */\n    async getPrevious(view) {\n        return this.getPreviousSync(view);\n    }\n    /**\n     * Returns the number of views in the stack.\n     */\n    async getLength() {\n        return Promise.resolve(this.views.length);\n    }\n    getActiveSync() {\n        return this.views[this.views.length - 1];\n    }\n    canGoBackSync(view = this.getActiveSync()) {\n        return !!(view && this.getPreviousSync(view));\n    }\n    getPreviousSync(view = this.getActiveSync()) {\n        if (!view) {\n            return undefined;\n        }\n        const views = this.views;\n        const index = views.indexOf(view);\n        return index > 0 ? views[index - 1] : undefined;\n    }\n    /**\n     * Adds a navigation stack change to the queue and schedules it to run.\n     *\n     * @returns Whether the transition succeeds.\n     */\n    async queueTrns(ti, done) {\n        var _a, _b;\n        if (this.isTransitioning && ((_a = ti.opts) === null || _a === void 0 ? void 0 : _a.skipIfBusy)) {\n            return false;\n        }\n        const promise = new Promise((resolve, reject) => {\n            ti.resolve = resolve;\n            ti.reject = reject;\n        });\n        ti.done = done;\n        /**\n         * If using router, check to see if navigation hooks\n         * will allow us to perform this transition. This\n         * is required in order for hooks to work with\n         * the ion-back-button or swipe to go back.\n         */\n        if (ti.opts && ti.opts.updateURL !== false && this.useRouter) {\n            const router = document.querySelector('ion-router');\n            if (router) {\n                const canTransition = await router.canTransition();\n                if (canTransition === false) {\n                    return false;\n                }\n                if (typeof canTransition === 'string') {\n                    router.push(canTransition, ti.opts.direction || 'back');\n                    return false;\n                }\n            }\n        }\n        // Normalize empty\n        if (((_b = ti.insertViews) === null || _b === void 0 ? void 0 : _b.length) === 0) {\n            ti.insertViews = undefined;\n        }\n        // Enqueue transition instruction\n        this.transInstr.push(ti);\n        // if there isn't a transition already happening\n        // then this will kick off this transition\n        this.nextTrns();\n        return promise;\n    }\n    success(result, ti) {\n        if (this.destroyed) {\n            this.fireError('nav controller was destroyed', ti);\n            return;\n        }\n        if (ti.done) {\n            ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\n        }\n        ti.resolve(result.hasCompleted);\n        if (ti.opts.updateURL !== false && this.useRouter) {\n            const router = document.querySelector('ion-router');\n            if (router) {\n                const direction = result.direction === 'back' ? 'back' : 'forward';\n                router.navChanged(direction);\n            }\n        }\n    }\n    failed(rejectReason, ti) {\n        if (this.destroyed) {\n            this.fireError('nav controller was destroyed', ti);\n            return;\n        }\n        this.transInstr.length = 0;\n        this.fireError(rejectReason, ti);\n    }\n    fireError(rejectReason, ti) {\n        if (ti.done) {\n            ti.done(false, false, rejectReason);\n        }\n        if (ti.reject && !this.destroyed) {\n            ti.reject(rejectReason);\n        }\n        else {\n            ti.resolve(false);\n        }\n    }\n    /**\n     * Consumes the next transition in the queue.\n     *\n     * @returns whether the transition is executed.\n     */\n    nextTrns() {\n        // this is the framework's bread 'n butta function\n        // only one transition is allowed at any given time\n        if (this.isTransitioning) {\n            return false;\n        }\n        // there is no transition happening right now, executes the next instructions.\n        const ti = this.transInstr.shift();\n        if (!ti) {\n            return false;\n        }\n        this.runTransition(ti);\n        return true;\n    }\n    /** Executes all the transition instruction from the queue. */\n    async runTransition(ti) {\n        try {\n            // set that this nav is actively transitioning\n            this.ionNavWillChange.emit();\n            this.isTransitioning = true;\n            this.prepareTI(ti);\n            const leavingView = this.getActiveSync();\n            const enteringView = this.getEnteringView(ti, leavingView);\n            if (!leavingView && !enteringView) {\n                throw new Error('no views in the stack to be removed');\n            }\n            if (enteringView && enteringView.state === VIEW_STATE_NEW) {\n                await enteringView.init(this.el);\n            }\n            this.postViewInit(enteringView, leavingView, ti);\n            // Needs transition?\n            const requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) && enteringView !== leavingView;\n            if (requiresTransition && ti.opts && leavingView) {\n                const isBackDirection = ti.opts.direction === 'back';\n                /**\n                 * If heading back, use the entering page's animation\n                 * unless otherwise specified by the developer.\n                 */\n                if (isBackDirection) {\n                    ti.opts.animationBuilder = ti.opts.animationBuilder || (enteringView === null || enteringView === void 0 ? void 0 : enteringView.animationBuilder);\n                }\n                leavingView.animationBuilder = ti.opts.animationBuilder;\n            }\n            let result;\n            if (requiresTransition) {\n                result = await this.transition(enteringView, leavingView, ti);\n            }\n            else {\n                // transition is not required, so we are already done!\n                // they're inserting/removing the views somewhere in the middle or\n                // beginning, so visually nothing needs to animate/transition\n                // resolve immediately because there's no animation that's happening\n                result = {\n                    hasCompleted: true,\n                    requiresTransition: false,\n                };\n            }\n            this.success(result, ti);\n            this.ionNavDidChange.emit();\n        }\n        catch (rejectReason) {\n            this.failed(rejectReason, ti);\n        }\n        this.isTransitioning = false;\n        this.nextTrns();\n    }\n    prepareTI(ti) {\n        var _a, _b;\n        var _c;\n        const viewsLength = this.views.length;\n        (_a = ti.opts) !== null && _a !== void 0 ? _a : (ti.opts = {});\n        (_b = (_c = ti.opts).delegate) !== null && _b !== void 0 ? _b : (_c.delegate = this.delegate);\n        if (ti.removeView !== undefined) {\n            assert(ti.removeStart !== undefined, 'removeView needs removeStart');\n            assert(ti.removeCount !== undefined, 'removeView needs removeCount');\n            const index = this.views.indexOf(ti.removeView);\n            if (index < 0) {\n                throw new Error('removeView was not found');\n            }\n            ti.removeStart += index;\n        }\n        if (ti.removeStart !== undefined) {\n            if (ti.removeStart < 0) {\n                ti.removeStart = viewsLength - 1;\n            }\n            if (ti.removeCount < 0) {\n                ti.removeCount = viewsLength - ti.removeStart;\n            }\n            ti.leavingRequiresTransition = ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\n        }\n        if (ti.insertViews) {\n            // allow -1 to be passed in to auto push it on the end\n            // and clean up the index if it's larger then the size of the stack\n            if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\n                ti.insertStart = viewsLength;\n            }\n            ti.enteringRequiresTransition = ti.insertStart === viewsLength;\n        }\n        const insertViews = ti.insertViews;\n        if (!insertViews) {\n            return;\n        }\n        assert(insertViews.length > 0, 'length can not be zero');\n        const viewControllers = convertToViews(insertViews);\n        if (viewControllers.length === 0) {\n            throw new Error('invalid views to insert');\n        }\n        // Check all the inserted view are correct\n        for (const view of viewControllers) {\n            view.delegate = ti.opts.delegate;\n            const nav = view.nav;\n            if (nav && nav !== this) {\n                throw new Error('inserted view was already inserted');\n            }\n            if (view.state === VIEW_STATE_DESTROYED) {\n                throw new Error('inserted view was already destroyed');\n            }\n        }\n        ti.insertViews = viewControllers;\n    }\n    /**\n     * Returns the view that will be entered considering the transition instructions.\n     *\n     * @param ti The instructions.\n     * @param leavingView The view being left or undefined if none.\n     *\n     * @returns The view that will be entered, undefined if none.\n     */\n    getEnteringView(ti, leavingView) {\n        // The last inserted view will be entered when view are inserted.\n        const insertViews = ti.insertViews;\n        if (insertViews !== undefined) {\n            return insertViews[insertViews.length - 1];\n        }\n        // When views are deleted, we will enter the last view that is not removed and not the view being left.\n        const removeStart = ti.removeStart;\n        if (removeStart !== undefined) {\n            const views = this.views;\n            const removeEnd = removeStart + ti.removeCount;\n            for (let i = views.length - 1; i >= 0; i--) {\n                const view = views[i];\n                if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\n                    return view;\n                }\n            }\n        }\n        return undefined;\n    }\n    /**\n     * Adds and Removes the views from the navigation stack.\n     *\n     * @param enteringView The view being entered.\n     * @param leavingView The view being left.\n     * @param ti The instructions.\n     */\n    postViewInit(enteringView, leavingView, ti) {\n        var _a, _b, _c;\n        assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\n        assert(ti.resolve, 'resolve must be valid');\n        assert(ti.reject, 'reject must be valid');\n        // Compute the views to remove.\n        const opts = ti.opts;\n        const { insertViews, removeStart, removeCount } = ti;\n        /** Records the view to destroy */\n        let destroyQueue;\n        // there are views to remove\n        if (removeStart !== undefined && removeCount !== undefined) {\n            assert(removeStart >= 0, 'removeStart can not be negative');\n            assert(removeCount >= 0, 'removeCount can not be negative');\n            destroyQueue = [];\n            for (let i = removeStart; i < removeStart + removeCount; i++) {\n                const view = this.views[i];\n                if (view !== undefined && view !== enteringView && view !== leavingView) {\n                    destroyQueue.push(view);\n                }\n            }\n            // default the direction to \"back\"\n            (_a = opts.direction) !== null && _a !== void 0 ? _a : (opts.direction = 'back');\n        }\n        const finalNumViews = this.views.length + ((_b = insertViews === null || insertViews === void 0 ? void 0 : insertViews.length) !== null && _b !== void 0 ? _b : 0) - (removeCount !== null && removeCount !== void 0 ? removeCount : 0);\n        assert(finalNumViews >= 0, 'final balance can not be negative');\n        if (finalNumViews === 0) {\n            console.warn(`You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.`, this, this.el);\n            throw new Error('navigation stack needs at least one root page');\n        }\n        // At this point the transition can not be rejected, any throw should be an error\n        // Insert the new views in the stack.\n        if (insertViews) {\n            // add the views to the\n            let insertIndex = ti.insertStart;\n            for (const view of insertViews) {\n                this.insertViewAt(view, insertIndex);\n                insertIndex++;\n            }\n            if (ti.enteringRequiresTransition) {\n                // default to forward if not already set\n                (_c = opts.direction) !== null && _c !== void 0 ? _c : (opts.direction = 'forward');\n            }\n        }\n        // if the views to be removed are in the beginning or middle\n        // and there is not a view that needs to visually transition out\n        // then just destroy them and don't transition anything\n        // batch all of lifecycles together\n        // let's make sure, callbacks are zoned\n        if (destroyQueue && destroyQueue.length > 0) {\n            for (const view of destroyQueue) {\n                lifecycle(view.element, LIFECYCLE_WILL_LEAVE);\n                lifecycle(view.element, LIFECYCLE_DID_LEAVE);\n                lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n            }\n            // once all lifecycle events has been delivered, we can safely detroy the views\n            for (const view of destroyQueue) {\n                this.destroyView(view);\n            }\n        }\n    }\n    async transition(enteringView, leavingView, ti) {\n        // we should animate (duration > 0) if the pushed page is not the first one (startup)\n        // or if it is a portal (modal, actionsheet, etc.)\n        const opts = ti.opts;\n        const progressCallback = opts.progressAnimation\n            ? (ani) => {\n                /**\n                 * Because this progress callback is called asynchronously\n                 * it is possible for the gesture to start and end before\n                 * the animation is ever set. In that scenario, we should\n                 * immediately call progressEnd so that the transition promise\n                 * resolves and the gesture does not get locked up.\n                 */\n                if (ani !== undefined && !this.gestureOrAnimationInProgress) {\n                    this.gestureOrAnimationInProgress = true;\n                    ani.onFinish(() => {\n                        this.gestureOrAnimationInProgress = false;\n                    }, { oneTimeCallback: true });\n                    /**\n                     * Playing animation to beginning\n                     * with a duration of 0 prevents\n                     * any flickering when the animation\n                     * is later cleaned up.\n                     */\n                    ani.progressEnd(0, 0, 0);\n                }\n                else {\n                    this.sbAni = ani;\n                }\n            }\n            : undefined;\n        const mode = getIonMode(this);\n        const enteringEl = enteringView.element;\n        // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n        const leavingEl = leavingView && leavingView.element;\n        const animationOpts = Object.assign(Object.assign({ mode, showGoBack: this.canGoBackSync(enteringView), baseEl: this.el, progressCallback, animated: this.animated && config.getBoolean('animated', true), enteringEl,\n            leavingEl }, opts), { animationBuilder: opts.animationBuilder || this.animation || config.get('navAnimation') });\n        const { hasCompleted } = await transition(animationOpts);\n        return this.transitionFinish(hasCompleted, enteringView, leavingView, opts);\n    }\n    transitionFinish(hasCompleted, enteringView, leavingView, opts) {\n        /**\n         * If the transition did not complete, the leavingView will still be the active\n         * view on the stack. Otherwise unmount all the views after the enteringView.\n         */\n        const activeView = hasCompleted ? enteringView : leavingView;\n        if (activeView) {\n            this.unmountInactiveViews(activeView);\n        }\n        return {\n            hasCompleted,\n            requiresTransition: true,\n            enteringView,\n            leavingView,\n            direction: opts.direction,\n        };\n    }\n    /**\n     * Inserts a view at the specified index.\n     *\n     * When the view already is in the stack it will be moved to the new position.\n     *\n     * @param view The view to insert.\n     * @param index The index where to insert the view.\n     */\n    insertViewAt(view, index) {\n        const views = this.views;\n        const existingIndex = views.indexOf(view);\n        if (existingIndex > -1) {\n            assert(view.nav === this, 'view is not part of the nav');\n            // The view already in the stack, removes it.\n            views.splice(existingIndex, 1);\n            // and add it back at the requested index.\n            views.splice(index, 0, view);\n        }\n        else {\n            assert(!view.nav, 'nav is used');\n            // this is a new view to add to the stack\n            // create the new entering view\n            view.nav = this;\n            views.splice(index, 0, view);\n        }\n    }\n    /**\n     * Removes a view from the stack.\n     *\n     * @param view The view to remove.\n     */\n    removeView(view) {\n        assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\n        const views = this.views;\n        const index = views.indexOf(view);\n        assert(index > -1, 'view must be part of the stack');\n        if (index >= 0) {\n            views.splice(index, 1);\n        }\n    }\n    destroyView(view) {\n        view._destroy();\n        this.removeView(view);\n    }\n    /**\n     * Unmounts all inactive views after the specified active view.\n     *\n     * DOM WRITE\n     *\n     * @param activeView The view that is actively visible in the stack. Used to calculate which views to unmount.\n     */\n    unmountInactiveViews(activeView) {\n        // ok, cleanup time!! Destroy all of the views that are\n        // INACTIVE and come after the active view\n        // only do this if the views exist, though\n        if (this.destroyed) {\n            return;\n        }\n        const views = this.views;\n        const activeViewIndex = views.indexOf(activeView);\n        for (let i = views.length - 1; i >= 0; i--) {\n            const view = views[i];\n            /**\n             * When inserting multiple views via insertPages\n             * the last page will be transitioned to, but the\n             * others will not be. As a result, a DOM element\n             * will only be created for the last page inserted.\n             * As a result, it is possible to have views in the\n             * stack that do not have `view.element` yet.\n             */\n            const element = view.element;\n            if (element) {\n                if (i > activeViewIndex) {\n                    // this view comes after the active view\n                    // let's unload it\n                    lifecycle(element, LIFECYCLE_WILL_UNLOAD);\n                    this.destroyView(view);\n                }\n                else if (i < activeViewIndex) {\n                    // this view comes before the active view\n                    // and it is not a portal then ensure it is hidden\n                    setPageHidden(element, true);\n                }\n            }\n        }\n    }\n    canStart() {\n        return (!this.gestureOrAnimationInProgress &&\n            !!this.swipeGesture &&\n            !this.isTransitioning &&\n            this.transInstr.length === 0 &&\n            this.canGoBackSync());\n    }\n    onStart() {\n        this.gestureOrAnimationInProgress = true;\n        this.pop({ direction: 'back', progressAnimation: true });\n    }\n    onMove(stepValue) {\n        if (this.sbAni) {\n            this.sbAni.progressStep(stepValue);\n        }\n    }\n    onEnd(shouldComplete, stepValue, dur) {\n        if (this.sbAni) {\n            this.sbAni.onFinish(() => {\n                this.gestureOrAnimationInProgress = false;\n            }, { oneTimeCallback: true });\n            // Account for rounding errors in JS\n            let newStepValue = shouldComplete ? -0.001 : 0.001;\n            /**\n             * Animation will be reversed here, so need to\n             * reverse the easing curve as well\n             *\n             * Additionally, we need to account for the time relative\n             * to the new easing curve, as `stepValue` is going to be given\n             * in terms of a linear curve.\n             */\n            if (!shouldComplete) {\n                this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\n                newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];\n            }\n            else {\n                newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];\n            }\n            this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\n        }\n        else {\n            this.gestureOrAnimationInProgress = false;\n        }\n    }\n    render() {\n        return h(\"slot\", { key: 'dfe98cb6604a2015a49f41beffebdd2da957dfff' });\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"swipeGesture\": [\"swipeGestureChanged\"],\n        \"root\": [\"rootChanged\"]\n    }; }\n};\nNav.style = IonNavStyle0;\n\nconst navLink = (el, routerDirection, component, componentProps, routerAnimation) => {\n    const nav = el.closest('ion-nav');\n    if (nav) {\n        if (routerDirection === 'forward') {\n            if (component !== undefined) {\n                return nav.push(component, componentProps, { skipIfBusy: true, animationBuilder: routerAnimation });\n            }\n        }\n        else if (routerDirection === 'root') {\n            if (component !== undefined) {\n                return nav.setRoot(component, componentProps, { skipIfBusy: true, animationBuilder: routerAnimation });\n            }\n        }\n        else if (routerDirection === 'back') {\n            return nav.pop({ skipIfBusy: true, animationBuilder: routerAnimation });\n        }\n    }\n    return Promise.resolve(false);\n};\n\nconst NavLink = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.onClick = () => {\n            return navLink(this.el, this.routerDirection, this.component, this.componentProps, this.routerAnimation);\n        };\n        this.component = undefined;\n        this.componentProps = undefined;\n        this.routerDirection = 'forward';\n        this.routerAnimation = undefined;\n    }\n    render() {\n        return h(Host, { key: 'd2f8545b4fbd5aa25ef36eb01dffbc5d35ccfbb9', onClick: this.onClick });\n    }\n    get el() { return getElement(this); }\n};\n\nexport { Nav as ion_nav, NavLink as ion_nav_link };\n"],"x_google_ignoreList":[0]}