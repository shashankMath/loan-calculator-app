{"version":3,"file":"4540.6971c88a7f3acab4.js","mappings":"yJAMA,MAKMA,EAAW,UAAXA,EAAc,MAChBC,YAAYC,IACRC,OAAiBC,KAAMF,GACvBE,KAAKC,wBAAuBC,KAAYF,KAAM,uBAAwB,GACtEA,KAAKG,iBAAmB,KACxBH,KAAKI,YAAa,EAClBJ,KAAKK,UAAW,EAChBL,KAAKM,oBAAiBC,CAC1B,CACAC,aAAaC,GACT,IAAIC,EACJ,MAAQC,aAAYC,cAAaC,eAAgBJ,EAAGK,OAEpDd,KAAKC,qBAAqBc,KAAK,CAC3BC,YAFgBL,GAAcC,EAAcC,GAG5CP,eAA+C,QAA9BI,EAAKV,KAAKM,sBAAmC,IAAPI,GAAgBA,IAG3EV,KAAKiB,uBACT,CAIAC,oBACQlB,KAAKG,mBACLgB,aAAanB,KAAKG,kBAClBH,KAAKG,iBAAmB,MAE5BH,KAAKI,YAAa,CACtB,CAIAgB,iBACIpB,KAAKI,YAAa,CACtB,CAIAa,wBACQjB,KAAKG,mBACLgB,aAAanB,KAAKG,kBAClBH,KAAKG,iBAAmB,MAE5BH,KAAKG,iBAAmBkB,WAAW,KAC/BrB,KAAKsB,mBAAkB,EAM3B,IACJ,CAMAA,oBAGStB,KAAKI,aACNJ,KAAKM,oBAAiBC,EAE9B,CAWMgB,WAAWC,EAAIC,GAAe,GAAM,IAAAC,EAAA1B,KAAA,SAAA2B,KAAA,YAEtC,MAAMC,EADWF,EAAKG,qBACCC,UAAWC,GAAYA,EAAQP,KAAOA,IAC/C,IAAVI,IAEJF,EAAKpB,gBAAiB,EACtBoB,EAAKT,wBAELS,EAAKM,GAAGC,SAAS,CACbC,IAAK,EACLC,KAAMP,EAHWF,EAAKM,GAAGI,YAIzBC,SAAUZ,EAAe,SAAW,YACrC,EAZmC,EAa1C,CACAI,qBACI,OAAOS,MAAMC,KAAKvC,KAAKgC,GAAGQ,iBAAiB,uBAC/C,CACAC,SACI,MAAQpC,WAAUC,kBAAmBN,KACrC,SAAQ0C,KAAEC,IAAM,CAAEC,IAAK,2CAA4CC,MAAO,CAClE,wBAAyBxC,EACzB,gCAAmD,IAAnBC,KAClC,EAAGoC,KAAE,OAAQ,CAAEE,IAAK,6CAC9B,CACA,MAAIZ,GAAO,SAAOc,KAAW9C,KAAO,GAExCJ,SAAYmD,MAAQ,CAChBC,IA5GsB,ybA6GtBC,GA1GqB,0bAGnBrD,CAAW","names":["SegmentView","constructor","hostRef","registerInstance","this","ionSegmentViewScroll","createEvent","scrollEndTimeout","isTouching","disabled","isManualScroll","undefined","handleScroll","ev","_a","scrollLeft","scrollWidth","clientWidth","target","emit","scrollRatio","resetScrollEndTimeout","handleScrollStart","clearTimeout","handleTouchEnd","setTimeout","checkForScrollEnd","setContent","id","smoothScroll","_this","_asyncToGenerator","index","getSegmentContents","findIndex","content","el","scrollTo","top","left","offsetWidth","behavior","Array","from","querySelectorAll","render","h","Host","key","class","getElement","style","ios","md"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@ionic/core/dist/esm/ion-segment-view.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, d as createEvent, h, f as Host, i as getElement } from './index-28849c61.js';\n\nconst segmentViewIosCss = \":host{display:-ms-flexbox;display:flex;height:100%;overflow-x:scroll;-webkit-scroll-snap-type:x mandatory;-ms-scroll-snap-type:x mandatory;scroll-snap-type:x mandatory;scrollbar-width:none;-ms-overflow-style:none}:host::-webkit-scrollbar{display:none}:host(.segment-view-disabled){-ms-touch-action:none;touch-action:none;overflow-x:hidden}:host(.segment-view-scroll-disabled){pointer-events:none}:host(.segment-view-disabled){opacity:0.3}\";\nconst IonSegmentViewIosStyle0 = segmentViewIosCss;\n\nconst segmentViewMdCss = \":host{display:-ms-flexbox;display:flex;height:100%;overflow-x:scroll;-webkit-scroll-snap-type:x mandatory;-ms-scroll-snap-type:x mandatory;scroll-snap-type:x mandatory;scrollbar-width:none;-ms-overflow-style:none}:host::-webkit-scrollbar{display:none}:host(.segment-view-disabled){-ms-touch-action:none;touch-action:none;overflow-x:hidden}:host(.segment-view-scroll-disabled){pointer-events:none}:host(.segment-view-disabled){opacity:0.3}\";\nconst IonSegmentViewMdStyle0 = segmentViewMdCss;\n\nconst SegmentView = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionSegmentViewScroll = createEvent(this, \"ionSegmentViewScroll\", 7);\n        this.scrollEndTimeout = null;\n        this.isTouching = false;\n        this.disabled = false;\n        this.isManualScroll = undefined;\n    }\n    handleScroll(ev) {\n        var _a;\n        const { scrollLeft, scrollWidth, clientWidth } = ev.target;\n        const scrollRatio = scrollLeft / (scrollWidth - clientWidth);\n        this.ionSegmentViewScroll.emit({\n            scrollRatio,\n            isManualScroll: (_a = this.isManualScroll) !== null && _a !== void 0 ? _a : true,\n        });\n        // Reset the timeout to check for scroll end\n        this.resetScrollEndTimeout();\n    }\n    /**\n     * Handle touch start event to know when the user is actively dragging the segment view.\n     */\n    handleScrollStart() {\n        if (this.scrollEndTimeout) {\n            clearTimeout(this.scrollEndTimeout);\n            this.scrollEndTimeout = null;\n        }\n        this.isTouching = true;\n    }\n    /**\n     * Handle touch end event to know when the user is no longer dragging the segment view.\n     */\n    handleTouchEnd() {\n        this.isTouching = false;\n    }\n    /**\n     * Reset the scroll end detection timer. This is called on every scroll event.\n     */\n    resetScrollEndTimeout() {\n        if (this.scrollEndTimeout) {\n            clearTimeout(this.scrollEndTimeout);\n            this.scrollEndTimeout = null;\n        }\n        this.scrollEndTimeout = setTimeout(() => {\n            this.checkForScrollEnd();\n        }, \n        // Setting this to a lower value may result in inconsistencies in behavior\n        // across browsers (particularly Firefox).\n        // Ideally, all of this logic is removed once the scroll end event is\n        // supported on all browsers (https://caniuse.com/?search=scrollend)\n        100);\n    }\n    /**\n     * Check if the scroll has ended and the user is not actively touching.\n     * If the conditions are met (active content is enabled and no active touch),\n     * reset the scroll position and emit the scroll end event.\n     */\n    checkForScrollEnd() {\n        // Only emit scroll end event if the active content is not disabled and\n        // the user is not touching the segment view\n        if (!this.isTouching) {\n            this.isManualScroll = undefined;\n        }\n    }\n    /**\n     * @internal\n     *\n     * This method is used to programmatically set the displayed segment content\n     * in the segment view. Calling this method will update the `value` of the\n     * corresponding segment button.\n     *\n     * @param id: The id of the segment content to display.\n     * @param smoothScroll: Whether to animate the scroll transition.\n     */\n    async setContent(id, smoothScroll = true) {\n        const contents = this.getSegmentContents();\n        const index = contents.findIndex((content) => content.id === id);\n        if (index === -1)\n            return;\n        this.isManualScroll = false;\n        this.resetScrollEndTimeout();\n        const contentWidth = this.el.offsetWidth;\n        this.el.scrollTo({\n            top: 0,\n            left: index * contentWidth,\n            behavior: smoothScroll ? 'smooth' : 'instant',\n        });\n    }\n    getSegmentContents() {\n        return Array.from(this.el.querySelectorAll('ion-segment-content'));\n    }\n    render() {\n        const { disabled, isManualScroll } = this;\n        return (h(Host, { key: '9f4f11d31c4db776f077e59ae895b35dd4454717', class: {\n                'segment-view-disabled': disabled,\n                'segment-view-scroll-disabled': isManualScroll === false,\n            } }, h(\"slot\", { key: 'ea58b21f031cee2ab2b70580f336deaefa364538' })));\n    }\n    get el() { return getElement(this); }\n};\nSegmentView.style = {\n    ios: IonSegmentViewIosStyle0,\n    md: IonSegmentViewMdStyle0\n};\n\nexport { SegmentView as ion_segment_view };\n"],"x_google_ignoreList":[0]}