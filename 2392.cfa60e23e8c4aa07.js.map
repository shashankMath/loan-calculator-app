{"version":3,"file":"2392.cfa60e23e8c4aa07.js","mappings":"iKAOA,MAMMA,EAAkB,kBAClBC,EAAkB,kBAClBC,EAAQ,CACVC,GAAI,mBACJC,GAAI,qBACJC,GAAI,qBACJC,GAAI,qBACJC,GAAI,sBACJC,MAAO,IAELC,EAAY,MACdC,YAAYC,IACRC,OAAiBC,KAAMF,GACvBE,KAAKC,uBAAsBC,KAAYF,KAAM,sBAAuB,GACpEA,KAAKG,SAAU,EACfH,KAAKI,eAAYC,EACjBL,KAAKM,UAAW,EAChBN,KAAKO,KAAOlB,EAAMI,EACtB,CACAe,eAAeL,GACXH,KAAKC,oBAAoBQ,KAAK,CAAEN,WACpC,CAIMO,YAAY,IAAAC,EAAAX,KAAA,SAAAY,KAAA,YACd,OAAOC,QAAQC,QAAQH,EAAKR,QAAS,EADvB,EAElB,CACMY,oBAAoB,IAAAC,EAAAhB,KAAA,SAAAY,KAAA,mBAGXK,eAAmB,KAAiC,MAAlBA,uBACnCA,eAAeC,YAAY,mBAErCF,EAAKG,mBACLH,EAAKI,aAAc,EAPG,EAQ1B,CACAC,uBACQrB,KAAKsB,MACLtB,KAAKsB,MACLtB,KAAKsB,SAAMjB,EAEnB,CACAe,cAMI,GALIpB,KAAKsB,MACLtB,KAAKsB,MACLtB,KAAKsB,SAAMjB,GAGXL,KAAKM,SAEL,YADAN,KAAKG,SAAU,GAInB,MAAMoB,EAAQvB,KAAKO,KACnB,GAAqB,kBAAVgB,EAEP,YADAvB,KAAKG,QAAUoB,GAInB,MAAMC,EAAanC,EAAMkC,IAAUA,EAEnC,GAA0B,IAAtBC,EAAWC,OAEX,YADAzB,KAAKG,SAAU,GAInB,MAAMuB,EAAYC,IACd3B,KAAKG,QAAUwB,EAAEC,SAEfC,EAAYC,OAAOC,WAAWP,GAEpCK,EAAUG,YAAYN,GACtB1B,KAAKsB,IAAM,IAAMO,EAAUI,eAAeP,GAC1C1B,KAAKG,QAAU0B,EAAUD,OAC7B,CAUAT,mBACI,MAAMf,EAAYJ,KAAKI,UACjB8B,EAAWlC,KAAKmC,GAAGD,SACnBE,EAAKpC,KAAKmC,GAAGE,kBACnB,IAAIC,GAAY,EAChB,QAASC,EAAI,EAAGA,EAAIH,EAAIG,IAAK,CACzB,MAAMC,EAAQN,EAASK,GACjBE,OAAuBpC,IAAdD,GAA2BoC,EAAME,KAAOtC,EACvD,GAAIqC,EACA,IAAIH,EAEA,YADAK,QAAQC,KAAK,kDAIbC,EAAaL,EAAOC,GACpBH,GAAY,EAGxB,CACKA,GACDK,QAAQC,KAAK,iDAErB,CACAE,SACI,MAAMC,KAAOC,KAAWhD,MACxB,SAAQiD,KAAEC,IAAM,CAAEC,IAAK,2CAA4CC,MAAO,CAClEC,CAACN,IAAO,EAER,CAAC,cAAcA,MAAS,EACxB,qBAAsB/C,KAAKG,WAC7B,EAAG8C,KAAE,OAAQ,CAAEE,IAAK,6CAC9B,CACA,MAAIhB,GAAO,SAAOmB,KAAWtD,KAAO,CACpC,mBAAWuD,GAAa,MAAO,CAC3BpD,QAAW,CAAC,kBACZG,SAAY,CAAC,eACbC,KAAQ,CAAC,eACV,GAEDsC,EAAeA,CAACV,EAAIM,KACtB,IAAIe,EACAC,EACAhB,GACAe,EAAQrE,EACRsE,EAAWrE,IAGXoE,EAAQpE,EACRqE,EAAWtE,GAEf,MAAMuE,EAAYvB,EAAGuB,UACrBA,EAAUC,IAAIH,GACdE,EAAUE,OAAOH,EAAQ,EAE7B7D,EAAUiE,MAAQ,CACdC,IAnJoB,qoBAoJpBtE,GAjJmB","names":["SPLIT_PANE_MAIN","SPLIT_PANE_SIDE","QUERY","xs","sm","md","lg","xl","never","SplitPane","constructor","hostRef","registerInstance","this","ionSplitPaneVisible","createEvent","visible","contentId","undefined","disabled","when","visibleChanged","emit","isVisible","_this","_asyncToGenerator","Promise","resolve","connectedCallback","_this2","customElements","whenDefined","styleMainElement","updateState","disconnectedCallback","rmL","query","mediaQuery","length","callback","q","matches","mediaList","window","matchMedia","addListener","removeListener","children","el","nu","childElementCount","foundMain","i","child","isMain","id","console","warn","setPaneClass","render","mode","getIonMode","h","Host","key","class","e","getElement","watchers","toAdd","toRemove","classList","add","remove","style","ios"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@ionic/core/dist/esm/ion-split-pane.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, d as createEvent, h, f as Host, i as getElement } from './index-28849c61.js';\nimport { b as getIonMode } from './ionic-global-c81d82ab.js';\n\nconst splitPaneIosCss = \":host{--side-width:100%;left:0;right:0;top:0;bottom:0;display:-ms-flexbox;display:flex;position:absolute;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:nowrap;flex-wrap:nowrap;contain:strict}:host(.split-pane-visible) ::slotted(.split-pane-main){left:0;right:0;top:0;bottom:0;position:relative;-ms-flex:1;flex:1;-webkit-box-shadow:none;box-shadow:none;overflow:hidden;z-index:0}::slotted(.split-pane-side:not(ion-menu)){display:none}:host{--border:0.55px solid var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-250, var(--ion-background-color-step-250, #c8c7cc))));--side-min-width:270px;--side-max-width:28%}\";\nconst IonSplitPaneIosStyle0 = splitPaneIosCss;\n\nconst splitPaneMdCss = \":host{--side-width:100%;left:0;right:0;top:0;bottom:0;display:-ms-flexbox;display:flex;position:absolute;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:nowrap;flex-wrap:nowrap;contain:strict}:host(.split-pane-visible) ::slotted(.split-pane-main){left:0;right:0;top:0;bottom:0;position:relative;-ms-flex:1;flex:1;-webkit-box-shadow:none;box-shadow:none;overflow:hidden;z-index:0}::slotted(.split-pane-side:not(ion-menu)){display:none}:host{--border:1px solid var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-150, var(--ion-background-color-step-150, rgba(0, 0, 0, 0.13)))));--side-min-width:270px;--side-max-width:28%}\";\nconst IonSplitPaneMdStyle0 = splitPaneMdCss;\n\n// TODO(FW-2832): types\nconst SPLIT_PANE_MAIN = 'split-pane-main';\nconst SPLIT_PANE_SIDE = 'split-pane-side';\nconst QUERY = {\n    xs: '(min-width: 0px)',\n    sm: '(min-width: 576px)',\n    md: '(min-width: 768px)',\n    lg: '(min-width: 992px)',\n    xl: '(min-width: 1200px)',\n    never: '',\n};\nconst SplitPane = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionSplitPaneVisible = createEvent(this, \"ionSplitPaneVisible\", 7);\n        this.visible = false;\n        this.contentId = undefined;\n        this.disabled = false;\n        this.when = QUERY['lg'];\n    }\n    visibleChanged(visible) {\n        this.ionSplitPaneVisible.emit({ visible });\n    }\n    /**\n     * @internal\n     */\n    async isVisible() {\n        return Promise.resolve(this.visible);\n    }\n    async connectedCallback() {\n        // TODO: connectedCallback is fired in CE build\n        // before WC is defined. This needs to be fixed in Stencil.\n        if (typeof customElements !== 'undefined' && customElements != null) {\n            await customElements.whenDefined('ion-split-pane');\n        }\n        this.styleMainElement();\n        this.updateState();\n    }\n    disconnectedCallback() {\n        if (this.rmL) {\n            this.rmL();\n            this.rmL = undefined;\n        }\n    }\n    updateState() {\n        if (this.rmL) {\n            this.rmL();\n            this.rmL = undefined;\n        }\n        // Check if the split-pane is disabled\n        if (this.disabled) {\n            this.visible = false;\n            return;\n        }\n        // When query is a boolean\n        const query = this.when;\n        if (typeof query === 'boolean') {\n            this.visible = query;\n            return;\n        }\n        // When query is a string, let's find first if it is a shortcut\n        const mediaQuery = QUERY[query] || query;\n        // Media query is empty or null, we hide it\n        if (mediaQuery.length === 0) {\n            this.visible = false;\n            return;\n        }\n        // Listen on media query\n        const callback = (q) => {\n            this.visible = q.matches;\n        };\n        const mediaList = window.matchMedia(mediaQuery);\n        // TODO FW-5869\n        mediaList.addListener(callback);\n        this.rmL = () => mediaList.removeListener(callback);\n        this.visible = mediaList.matches;\n    }\n    /**\n     * Attempt to find the main content\n     * element inside of the split pane.\n     * If found, set it as the main node.\n     *\n     * We assume that the main node\n     * is available in the DOM on split\n     * pane load.\n     */\n    styleMainElement() {\n        const contentId = this.contentId;\n        const children = this.el.children;\n        const nu = this.el.childElementCount;\n        let foundMain = false;\n        for (let i = 0; i < nu; i++) {\n            const child = children[i];\n            const isMain = contentId !== undefined && child.id === contentId;\n            if (isMain) {\n                if (foundMain) {\n                    console.warn('split pane cannot have more than one main node');\n                    return;\n                }\n                else {\n                    setPaneClass(child, isMain);\n                    foundMain = true;\n                }\n            }\n        }\n        if (!foundMain) {\n            console.warn('split pane does not have a specified main node');\n        }\n    }\n    render() {\n        const mode = getIonMode(this);\n        return (h(Host, { key: '1ca0b0299d03605bb358112ca56cbafbe58f00f5', class: {\n                [mode]: true,\n                // Used internally for styling\n                [`split-pane-${mode}`]: true,\n                'split-pane-visible': this.visible,\n            } }, h(\"slot\", { key: 'abe231361727ae7fc63edd592a4490caac1909fb' })));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"visible\": [\"visibleChanged\"],\n        \"disabled\": [\"updateState\"],\n        \"when\": [\"updateState\"]\n    }; }\n};\nconst setPaneClass = (el, isMain) => {\n    let toAdd;\n    let toRemove;\n    if (isMain) {\n        toAdd = SPLIT_PANE_MAIN;\n        toRemove = SPLIT_PANE_SIDE;\n    }\n    else {\n        toAdd = SPLIT_PANE_SIDE;\n        toRemove = SPLIT_PANE_MAIN;\n    }\n    const classList = el.classList;\n    classList.add(toAdd);\n    classList.remove(toRemove);\n};\nSplitPane.style = {\n    ios: IonSplitPaneIosStyle0,\n    md: IonSplitPaneMdStyle0\n};\n\nexport { SplitPane as ion_split_pane };\n"],"x_google_ignoreList":[0]}