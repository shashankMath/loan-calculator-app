{"version":3,"file":"852.8731de2388da78af.js","mappings":"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","names":["createBaseAnimation","pullingRefresherIcon","spinner","querySelector","circle","shadowRoot","spinnerArrowContainer","arrowContainer","arrow","baseAnimation","createAnimation","duration","easing","spinnerArrowContainerAnimation","addElement","keyframes","offset","opacity","circleInnerAnimation","strokeDasharray","circleOuterAnimation","transform","arrowContainerAnimation","arrowAnimation","addAnimation","translateElement","el","value","Promise","resolve","trans","transitionEndAsync","writeTask","style","setProperty","undefined","removeProperty","supportsRubberBandScrolling","navigator","maxTouchPoints","CSS","supports","shouldUseNativeRefresher","_ref","_asyncToGenerator","referenceEl","mode","refresherContent","componentOnReady","pullingSpinner","refreshingSpinner","_x","_x2","apply","this","arguments","Refresher","constructor","hostRef","registerInstance","ionRefresh","createEvent","ionPull","ionStart","appliedStyles","didStart","progress","pointerDown","needsCompletion","didRefresh","contentFullscreen","lastVelocityY","animations","nativeRefresher","state","pullMin","pullMax","closeDuration","snapbackDuration","pullFactor","disabled","disabledChanged","gesture","enable","checkNativeRefresher","_this","useNativeRefresher","getIonMode","contentEl","closest","setupNativeRefresher","destroyNativeRefresher","scrollEl","scrollListenerCallback","removeEventListener","resetNativeRefresher","_this2","forEach","ani","destroy","setupiOSNativeRefresher","_this3","elementToTransform","ticks","querySelectorAll","MAX_PULL","clientHeight","NUM_TICKS","length","readTask","scrollTop","refresherHeight","ratio","clamp","setSpinnerOpacity","toString","emit","pullAmount","Math","abs","handleScrollWhileRefreshing","beginRefresh","hapticImpact","ImpactStyle","Light","handleScrollWhilePulling","numTicks","i","min","max","progression","addEventListener","then","__webpack_require__","bind","createGesture","gestureName","gesturePriority","direction","threshold","onStart","onMove","ev","velocityY","onEnd","setupMDNativeRefresher","_this4","getElementRoot","refreshingCircle","canStart","data","animation","cancelled","overflowProperty","matches","ION_CONTENT_CLASS_SELECTOR","animationType","previousSibling","previousElementSibling","tagName","getRefresherAnimationType","createPullingAnimation","type","refresherEl","createScaleAnimation","height","spinnerAnimation","createTranslateAnimation","progressStart","push","deltaY","progressStep","progressEnd","onFinish","getTimeGivenProgression","snapBackAnimation","fromTo","createSnapBackAnimation","play","_this5","setCss","componentDidUpdate","connectedCallback","_this6","getAttribute","console","error","ION_CONTENT_ELEMENT_SELECTOR","customScrollTarget","getScrollElement","backgroundContentEl","getBackgroundElement","fullscreen","passive","printIonContentErrorMsg","disconnectedCallback","complete","_this7","raf","close","cancel","_this8","getProgress","memoizeOverflowStyle","detail","event","touches","Number","isNaN","cancelable","preventDefault","restoreOverflowStyle","delay","setTimeout","_a","y","overflowVisible","shouldRestoreOverflowStyle","scrollStyle","backgroundStyle","transitionDuration","transitionDelay","overflow","overflowX","overflowY","overflowStyles","render","h","Host","key","slot","class","e","getElement","watchers","ios","md","RefresherContent","customHTMLEnabled","config","get","ENABLE_HTML_CONTENT_DEFAULT","pullingIcon","pullingText","refreshingText","componentWillLoad","hasRubberBandScrolling","arrowDown","renderPullingText","innerHTML","sanitizeDOMString","renderRefreshingText","hasSpinner","SPINNERS","name","paused","icon","caretBackSharp","lazy"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@ionic/core/dist/esm/ion-refresher_2.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { w as writeTask, r as registerInstance, d as createEvent, e as readTask, h, i as getElement, f as Host } from './index-28849c61.js';\nimport { g as getTimeGivenProgression } from './cubic-bezier-fe2083dc.js';\nimport { I as ION_CONTENT_CLASS_SELECTOR, b as ION_CONTENT_ELEMENT_SELECTOR, p as printIonContentErrorMsg, g as getScrollElement } from './index-5cc724f3.js';\nimport { t as transitionEndAsync, c as componentOnReady, j as clamp, g as getElementRoot, r as raf } from './helpers-da915de8.js';\nimport { d as hapticImpact, I as ImpactStyle } from './haptic-ac164e4c.js';\nimport { b as getIonMode, c as config } from './ionic-global-c81d82ab.js';\nimport { c as createAnimation } from './animation-eab5a4ca.js';\nimport { E as ENABLE_HTML_CONTENT_DEFAULT, a as sanitizeDOMString } from './config-49c88215.js';\nimport { h as caretBackSharp, i as arrowDown } from './index-e2cf2ceb.js';\nimport { S as SPINNERS } from './spinner-configs-964f7cf3.js';\nimport './index-9b0d46f4.js';\nimport './capacitor-59395cbd.js';\nimport './index-a5d50daf.js';\n\nconst getRefresherAnimationType = (contentEl) => {\n    const previousSibling = contentEl.previousElementSibling;\n    const hasHeader = previousSibling !== null && previousSibling.tagName === 'ION-HEADER';\n    return hasHeader ? 'translate' : 'scale';\n};\nconst createPullingAnimation = (type, pullingSpinner, refresherEl) => {\n    return type === 'scale'\n        ? createScaleAnimation(pullingSpinner, refresherEl)\n        : createTranslateAnimation(pullingSpinner, refresherEl);\n};\nconst createBaseAnimation = (pullingRefresherIcon) => {\n    const spinner = pullingRefresherIcon.querySelector('ion-spinner');\n    const circle = spinner.shadowRoot.querySelector('circle');\n    const spinnerArrowContainer = pullingRefresherIcon.querySelector('.spinner-arrow-container');\n    const arrowContainer = pullingRefresherIcon.querySelector('.arrow-container');\n    const arrow = arrowContainer ? arrowContainer.querySelector('ion-icon') : null;\n    const baseAnimation = createAnimation().duration(1000).easing('ease-out');\n    const spinnerArrowContainerAnimation = createAnimation()\n        .addElement(spinnerArrowContainer)\n        .keyframes([\n        { offset: 0, opacity: '0.3' },\n        { offset: 0.45, opacity: '0.3' },\n        { offset: 0.55, opacity: '1' },\n        { offset: 1, opacity: '1' },\n    ]);\n    const circleInnerAnimation = createAnimation()\n        .addElement(circle)\n        .keyframes([\n        { offset: 0, strokeDasharray: '1px, 200px' },\n        { offset: 0.2, strokeDasharray: '1px, 200px' },\n        { offset: 0.55, strokeDasharray: '100px, 200px' },\n        { offset: 1, strokeDasharray: '100px, 200px' },\n    ]);\n    const circleOuterAnimation = createAnimation()\n        .addElement(spinner)\n        .keyframes([\n        { offset: 0, transform: 'rotate(-90deg)' },\n        { offset: 1, transform: 'rotate(210deg)' },\n    ]);\n    /**\n     * Only add arrow animation if present\n     * this allows users to customize the spinners\n     * without errors being thrown\n     */\n    if (arrowContainer && arrow) {\n        const arrowContainerAnimation = createAnimation()\n            .addElement(arrowContainer)\n            .keyframes([\n            { offset: 0, transform: 'rotate(0deg)' },\n            { offset: 0.3, transform: 'rotate(0deg)' },\n            { offset: 0.55, transform: 'rotate(280deg)' },\n            { offset: 1, transform: 'rotate(400deg)' },\n        ]);\n        const arrowAnimation = createAnimation()\n            .addElement(arrow)\n            .keyframes([\n            { offset: 0, transform: 'translateX(2px) scale(0)' },\n            { offset: 0.3, transform: 'translateX(2px) scale(0)' },\n            { offset: 0.55, transform: 'translateX(-1.5px) scale(1)' },\n            { offset: 1, transform: 'translateX(-1.5px) scale(1)' },\n        ]);\n        baseAnimation.addAnimation([arrowContainerAnimation, arrowAnimation]);\n    }\n    return baseAnimation.addAnimation([spinnerArrowContainerAnimation, circleInnerAnimation, circleOuterAnimation]);\n};\nconst createScaleAnimation = (pullingRefresherIcon, refresherEl) => {\n    /**\n     * Do not take the height of the refresher icon\n     * because at this point the DOM has not updated,\n     * so the refresher icon is still hidden with\n     * display: none.\n     * The `ion-refresher` container height\n     * is roughly the amount we need to offset\n     * the icon by when pulling down.\n     */\n    const height = refresherEl.clientHeight;\n    const spinnerAnimation = createAnimation()\n        .addElement(pullingRefresherIcon)\n        .keyframes([\n        { offset: 0, transform: `scale(0) translateY(-${height}px)` },\n        { offset: 1, transform: 'scale(1) translateY(100px)' },\n    ]);\n    return createBaseAnimation(pullingRefresherIcon).addAnimation([spinnerAnimation]);\n};\nconst createTranslateAnimation = (pullingRefresherIcon, refresherEl) => {\n    /**\n     * Do not take the height of the refresher icon\n     * because at this point the DOM has not updated,\n     * so the refresher icon is still hidden with\n     * display: none.\n     * The `ion-refresher` container height\n     * is roughly the amount we need to offset\n     * the icon by when pulling down.\n     */\n    const height = refresherEl.clientHeight;\n    const spinnerAnimation = createAnimation()\n        .addElement(pullingRefresherIcon)\n        .keyframes([\n        { offset: 0, transform: `translateY(-${height}px)` },\n        { offset: 1, transform: 'translateY(100px)' },\n    ]);\n    return createBaseAnimation(pullingRefresherIcon).addAnimation([spinnerAnimation]);\n};\nconst createSnapBackAnimation = (pullingRefresherIcon) => {\n    return createAnimation()\n        .duration(125)\n        .addElement(pullingRefresherIcon)\n        .fromTo('transform', 'translateY(var(--ion-pulling-refresher-translate, 100px))', 'translateY(0px)');\n};\n// iOS Native Refresher\n// -----------------------------\nconst setSpinnerOpacity = (spinner, opacity) => {\n    spinner.style.setProperty('opacity', opacity.toString());\n};\nconst handleScrollWhilePulling = (ticks, numTicks, pullAmount) => {\n    const max = 1;\n    writeTask(() => {\n        ticks.forEach((el, i) => {\n            /**\n             * Compute the opacity of each tick\n             * mark as a percentage of the pullAmount\n             * offset by max / numTicks so\n             * the tick marks are shown staggered.\n             */\n            const min = i * (max / numTicks);\n            const range = max - min;\n            const start = pullAmount - min;\n            const progression = clamp(0, start / range, 1);\n            el.style.setProperty('opacity', progression.toString());\n        });\n    });\n};\nconst handleScrollWhileRefreshing = (spinner, lastVelocityY) => {\n    writeTask(() => {\n        // If user pulls down quickly, the spinner should spin faster\n        spinner.style.setProperty('--refreshing-rotation-duration', lastVelocityY >= 1.0 ? '0.5s' : '2s');\n        spinner.style.setProperty('opacity', '1');\n    });\n};\nconst translateElement = (el, value, duration = 200) => {\n    if (!el) {\n        return Promise.resolve();\n    }\n    const trans = transitionEndAsync(el, duration);\n    writeTask(() => {\n        el.style.setProperty('transition', `${duration}ms all ease-out`);\n        if (value === undefined) {\n            el.style.removeProperty('transform');\n        }\n        else {\n            el.style.setProperty('transform', `translate3d(0px, ${value}, 0px)`);\n        }\n    });\n    return trans;\n};\n// Utils\n// -----------------------------\n/**\n * In order to use the native iOS refresher the device must support rubber band scrolling.\n * As part of this, we need to exclude Desktop Safari because it has a slightly different rubber band effect that is not compatible with the native refresher in Ionic.\n *\n * We also need to be careful not to include devices that spoof their user agent.\n * For example, when using iOS emulation in Chrome the user agent will be spoofed such that\n * navigator.maxTouchPointer > 0. To work around this,\n * we check to see if the apple-pay-logo is supported as a named image which is only\n * true on Apple devices.\n *\n * We previously checked referencEl.style.webkitOverflowScrolling to explicitly check\n * for rubber band support. However, this property was removed on iPadOS and it's possible\n * that this will be removed on iOS in the future too.\n *\n */\nconst supportsRubberBandScrolling = () => {\n    return navigator.maxTouchPoints > 0 && CSS.supports('background: -webkit-named-image(apple-pay-logo-black)');\n};\nconst shouldUseNativeRefresher = async (referenceEl, mode) => {\n    const refresherContent = referenceEl.querySelector('ion-refresher-content');\n    if (!refresherContent) {\n        return Promise.resolve(false);\n    }\n    await new Promise((resolve) => componentOnReady(refresherContent, resolve));\n    const pullingSpinner = referenceEl.querySelector('ion-refresher-content .refresher-pulling ion-spinner');\n    const refreshingSpinner = referenceEl.querySelector('ion-refresher-content .refresher-refreshing ion-spinner');\n    return (pullingSpinner !== null &&\n        refreshingSpinner !== null &&\n        ((mode === 'ios' && supportsRubberBandScrolling()) || mode === 'md'));\n};\n\nconst refresherIosCss = \"ion-refresher{top:0;display:none;position:absolute;width:100%;height:60px;pointer-events:none;z-index:-1}ion-refresher{inset-inline-start:0}ion-refresher.refresher-active{display:block}ion-refresher-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;height:100%}.refresher-pulling,.refresher-refreshing{display:none;width:100%}.refresher-pulling-icon,.refresher-refreshing-icon{-webkit-transform-origin:center;transform-origin:center;-webkit-transition:200ms;transition:200ms;font-size:30px;text-align:center}:host-context([dir=rtl]) .refresher-pulling-icon,:host-context([dir=rtl]) .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}[dir=rtl] .refresher-pulling-icon,[dir=rtl] .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}@supports selector(:dir(rtl)){.refresher-pulling-icon:dir(rtl),.refresher-refreshing-icon:dir(rtl){-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}}.refresher-pulling-text,.refresher-refreshing-text{font-size:16px;text-align:center}ion-refresher-content .arrow-container{display:none}.refresher-pulling ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling-icon{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.refresher-refreshing ion-refresher-content .refresher-refreshing{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-completing ion-refresher-content .refresher-refreshing{display:block}.refresher-completing ion-refresher-content .refresher-refreshing-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-native .refresher-pulling-text,.refresher-native .refresher-refreshing-text{display:none}.refresher-ios .refresher-pulling-icon,.refresher-ios .refresher-refreshing-icon{color:var(--ion-text-color, #000)}.refresher-ios .refresher-pulling-text,.refresher-ios .refresher-refreshing-text{color:var(--ion-text-color, #000)}.refresher-ios .refresher-refreshing .spinner-lines-ios line,.refresher-ios .refresher-refreshing .spinner-lines-small-ios line,.refresher-ios .refresher-refreshing .spinner-crescent circle{stroke:var(--ion-text-color, #000)}.refresher-ios .refresher-refreshing .spinner-bubbles circle,.refresher-ios .refresher-refreshing .spinner-circles circle,.refresher-ios .refresher-refreshing .spinner-dots circle{fill:var(--ion-text-color, #000)}ion-refresher.refresher-native{display:block;z-index:1}ion-refresher.refresher-native ion-spinner{-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:0;margin-bottom:0}.refresher-native .refresher-refreshing ion-spinner{--refreshing-rotation-duration:2s;display:none;-webkit-animation:var(--refreshing-rotation-duration) ease-out refresher-rotate forwards;animation:var(--refreshing-rotation-duration) ease-out refresher-rotate forwards}.refresher-native .refresher-refreshing{display:none;-webkit-animation:250ms linear refresher-pop forwards;animation:250ms linear refresher-pop forwards}.refresher-native ion-spinner{width:32px;height:32px;color:var(--ion-color-step-450, var(--ion-background-color-step-450, #747577))}.refresher-native.refresher-refreshing .refresher-pulling ion-spinner,.refresher-native.refresher-completing .refresher-pulling ion-spinner{display:none}.refresher-native.refresher-refreshing .refresher-refreshing ion-spinner,.refresher-native.refresher-completing .refresher-refreshing ion-spinner{display:block}.refresher-native.refresher-pulling .refresher-pulling ion-spinner{display:block}.refresher-native.refresher-pulling .refresher-refreshing ion-spinner{display:none}.refresher-native.refresher-completing ion-refresher-content .refresher-refreshing-icon{-webkit-transform:scale(0) rotate(180deg);transform:scale(0) rotate(180deg);-webkit-transition:300ms;transition:300ms}@-webkit-keyframes refresher-pop{0%{-webkit-transform:scale(1);transform:scale(1);-webkit-animation-timing-function:ease-in;animation-timing-function:ease-in}50%{-webkit-transform:scale(1.2);transform:scale(1.2);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}100%{-webkit-transform:scale(1);transform:scale(1)}}@keyframes refresher-pop{0%{-webkit-transform:scale(1);transform:scale(1);-webkit-animation-timing-function:ease-in;animation-timing-function:ease-in}50%{-webkit-transform:scale(1.2);transform:scale(1.2);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}100%{-webkit-transform:scale(1);transform:scale(1)}}@-webkit-keyframes refresher-rotate{from{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(180deg);transform:rotate(180deg)}}@keyframes refresher-rotate{from{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(180deg);transform:rotate(180deg)}}\";\nconst IonRefresherIosStyle0 = refresherIosCss;\n\nconst refresherMdCss = \"ion-refresher{top:0;display:none;position:absolute;width:100%;height:60px;pointer-events:none;z-index:-1}ion-refresher{inset-inline-start:0}ion-refresher.refresher-active{display:block}ion-refresher-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;height:100%}.refresher-pulling,.refresher-refreshing{display:none;width:100%}.refresher-pulling-icon,.refresher-refreshing-icon{-webkit-transform-origin:center;transform-origin:center;-webkit-transition:200ms;transition:200ms;font-size:30px;text-align:center}:host-context([dir=rtl]) .refresher-pulling-icon,:host-context([dir=rtl]) .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}[dir=rtl] .refresher-pulling-icon,[dir=rtl] .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}@supports selector(:dir(rtl)){.refresher-pulling-icon:dir(rtl),.refresher-refreshing-icon:dir(rtl){-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}}.refresher-pulling-text,.refresher-refreshing-text{font-size:16px;text-align:center}ion-refresher-content .arrow-container{display:none}.refresher-pulling ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling-icon{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.refresher-refreshing ion-refresher-content .refresher-refreshing{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-completing ion-refresher-content .refresher-refreshing{display:block}.refresher-completing ion-refresher-content .refresher-refreshing-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-native .refresher-pulling-text,.refresher-native .refresher-refreshing-text{display:none}.refresher-md .refresher-pulling-icon,.refresher-md .refresher-refreshing-icon{color:var(--ion-text-color, #000)}.refresher-md .refresher-pulling-text,.refresher-md .refresher-refreshing-text{color:var(--ion-text-color, #000)}.refresher-md .refresher-refreshing .spinner-lines-md line,.refresher-md .refresher-refreshing .spinner-lines-small-md line,.refresher-md .refresher-refreshing .spinner-crescent circle{stroke:var(--ion-text-color, #000)}.refresher-md .refresher-refreshing .spinner-bubbles circle,.refresher-md .refresher-refreshing .spinner-circles circle,.refresher-md .refresher-refreshing .spinner-dots circle{fill:var(--ion-text-color, #000)}ion-refresher.refresher-native{display:block;z-index:1}ion-refresher.refresher-native ion-spinner{-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:0;margin-bottom:0;width:24px;height:24px;color:var(--ion-color-primary, #0054e9)}ion-refresher.refresher-native .spinner-arrow-container{display:inherit}ion-refresher.refresher-native .arrow-container{display:block;position:absolute;width:24px;height:24px}ion-refresher.refresher-native .arrow-container ion-icon{-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:0;margin-bottom:0;left:0;right:0;bottom:-4px;position:absolute;color:var(--ion-color-primary, #0054e9);font-size:12px}ion-refresher.refresher-native.refresher-pulling ion-refresher-content .refresher-pulling,ion-refresher.refresher-native.refresher-ready ion-refresher-content .refresher-pulling{display:-ms-flexbox;display:flex}ion-refresher.refresher-native.refresher-refreshing ion-refresher-content .refresher-refreshing,ion-refresher.refresher-native.refresher-completing ion-refresher-content .refresher-refreshing,ion-refresher.refresher-native.refresher-cancelling ion-refresher-content .refresher-refreshing{display:-ms-flexbox;display:flex}ion-refresher.refresher-native .refresher-pulling-icon{-webkit-transform:translateY(calc(-100% - 10px));transform:translateY(calc(-100% - 10px))}ion-refresher.refresher-native .refresher-pulling-icon,ion-refresher.refresher-native .refresher-refreshing-icon{-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:0;margin-bottom:0;border-radius:100%;-webkit-padding-start:8px;padding-inline-start:8px;-webkit-padding-end:8px;padding-inline-end:8px;padding-top:8px;padding-bottom:8px;display:-ms-flexbox;display:flex;border:1px solid var(--ion-color-step-200, var(--ion-background-color-step-200, #ececec));background:var(--ion-color-step-250, var(--ion-background-color-step-250, #ffffff));-webkit-box-shadow:0px 1px 6px rgba(0, 0, 0, 0.1);box-shadow:0px 1px 6px rgba(0, 0, 0, 0.1)}\";\nconst IonRefresherMdStyle0 = refresherMdCss;\n\nconst Refresher = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionRefresh = createEvent(this, \"ionRefresh\", 7);\n        this.ionPull = createEvent(this, \"ionPull\", 7);\n        this.ionStart = createEvent(this, \"ionStart\", 7);\n        this.appliedStyles = false;\n        this.didStart = false;\n        this.progress = 0;\n        this.pointerDown = false;\n        this.needsCompletion = false;\n        this.didRefresh = false;\n        this.contentFullscreen = false;\n        this.lastVelocityY = 0;\n        this.animations = [];\n        this.nativeRefresher = false;\n        this.state = 1 /* RefresherState.Inactive */;\n        this.pullMin = 60;\n        this.pullMax = this.pullMin + 60;\n        this.closeDuration = '280ms';\n        this.snapbackDuration = '280ms';\n        this.pullFactor = 1;\n        this.disabled = false;\n    }\n    disabledChanged() {\n        if (this.gesture) {\n            this.gesture.enable(!this.disabled);\n        }\n    }\n    async checkNativeRefresher() {\n        const useNativeRefresher = await shouldUseNativeRefresher(this.el, getIonMode(this));\n        if (useNativeRefresher && !this.nativeRefresher) {\n            const contentEl = this.el.closest('ion-content');\n            this.setupNativeRefresher(contentEl);\n        }\n        else if (!useNativeRefresher) {\n            this.destroyNativeRefresher();\n        }\n    }\n    destroyNativeRefresher() {\n        if (this.scrollEl && this.scrollListenerCallback) {\n            this.scrollEl.removeEventListener('scroll', this.scrollListenerCallback);\n            this.scrollListenerCallback = undefined;\n        }\n        this.nativeRefresher = false;\n    }\n    async resetNativeRefresher(el, state) {\n        this.state = state;\n        if (getIonMode(this) === 'ios') {\n            await translateElement(el, undefined, 300);\n        }\n        else {\n            await transitionEndAsync(this.el.querySelector('.refresher-refreshing-icon'), 200);\n        }\n        this.didRefresh = false;\n        this.needsCompletion = false;\n        this.pointerDown = false;\n        this.animations.forEach((ani) => ani.destroy());\n        this.animations = [];\n        this.progress = 0;\n        this.state = 1 /* RefresherState.Inactive */;\n    }\n    async setupiOSNativeRefresher(pullingSpinner, refreshingSpinner) {\n        this.elementToTransform = this.scrollEl;\n        const ticks = pullingSpinner.shadowRoot.querySelectorAll('svg');\n        let MAX_PULL = this.scrollEl.clientHeight * 0.16;\n        const NUM_TICKS = ticks.length;\n        writeTask(() => ticks.forEach((el) => el.style.setProperty('animation', 'none')));\n        this.scrollListenerCallback = () => {\n            // If pointer is not on screen or refresher is not active, ignore scroll\n            if (!this.pointerDown && this.state === 1 /* RefresherState.Inactive */) {\n                return;\n            }\n            readTask(() => {\n                // PTR should only be active when overflow scrolling at the top\n                const scrollTop = this.scrollEl.scrollTop;\n                const refresherHeight = this.el.clientHeight;\n                if (scrollTop > 0) {\n                    /**\n                     * If refresher is refreshing and user tries to scroll\n                     * progressively fade refresher out/in\n                     */\n                    if (this.state === 8 /* RefresherState.Refreshing */) {\n                        const ratio = clamp(0, scrollTop / (refresherHeight * 0.5), 1);\n                        writeTask(() => setSpinnerOpacity(refreshingSpinner, 1 - ratio));\n                        return;\n                    }\n                    return;\n                }\n                if (this.pointerDown) {\n                    if (!this.didStart) {\n                        this.didStart = true;\n                        this.ionStart.emit();\n                    }\n                    // emit \"pulling\" on every move\n                    if (this.pointerDown) {\n                        this.ionPull.emit();\n                    }\n                }\n                /**\n                 * We want to delay the start of this gesture by ~30px\n                 * when initially pulling down so the refresher does not\n                 * overlap with the content. But when letting go of the\n                 * gesture before the refresher completes, we want the\n                 * refresher tick marks to quickly fade out.\n                 */\n                const offset = this.didStart ? 30 : 0;\n                const pullAmount = (this.progress = clamp(0, (Math.abs(scrollTop) - offset) / MAX_PULL, 1));\n                const shouldShowRefreshingSpinner = this.state === 8 /* RefresherState.Refreshing */ || pullAmount === 1;\n                if (shouldShowRefreshingSpinner) {\n                    if (this.pointerDown) {\n                        handleScrollWhileRefreshing(refreshingSpinner, this.lastVelocityY);\n                    }\n                    if (!this.didRefresh) {\n                        this.beginRefresh();\n                        this.didRefresh = true;\n                        hapticImpact({ style: ImpactStyle.Light });\n                        /**\n                         * Translate the content element otherwise when pointer is removed\n                         * from screen the scroll content will bounce back over the refresher\n                         */\n                        if (!this.pointerDown) {\n                            translateElement(this.elementToTransform, `${refresherHeight}px`);\n                        }\n                    }\n                }\n                else {\n                    this.state = 2 /* RefresherState.Pulling */;\n                    handleScrollWhilePulling(ticks, NUM_TICKS, pullAmount);\n                }\n            });\n        };\n        this.scrollEl.addEventListener('scroll', this.scrollListenerCallback);\n        this.gesture = (await import('./index-39782642.js')).createGesture({\n            el: this.scrollEl,\n            gestureName: 'refresher',\n            gesturePriority: 31,\n            direction: 'y',\n            threshold: 5,\n            onStart: () => {\n                this.pointerDown = true;\n                if (!this.didRefresh) {\n                    translateElement(this.elementToTransform, '0px');\n                }\n                /**\n                 * If the content had `display: none` when\n                 * the refresher was initialized, its clientHeight\n                 * will be 0. When the gesture starts, the content\n                 * will be visible, so try to get the correct\n                 * client height again. This is most common when\n                 * using the refresher in an ion-menu.\n                 */\n                if (MAX_PULL === 0) {\n                    MAX_PULL = this.scrollEl.clientHeight * 0.16;\n                }\n            },\n            onMove: (ev) => {\n                this.lastVelocityY = ev.velocityY;\n            },\n            onEnd: () => {\n                this.pointerDown = false;\n                this.didStart = false;\n                if (this.needsCompletion) {\n                    this.resetNativeRefresher(this.elementToTransform, 32 /* RefresherState.Completing */);\n                    this.needsCompletion = false;\n                }\n                else if (this.didRefresh) {\n                    readTask(() => translateElement(this.elementToTransform, `${this.el.clientHeight}px`));\n                }\n            },\n        });\n        this.disabledChanged();\n    }\n    async setupMDNativeRefresher(contentEl, pullingSpinner, refreshingSpinner) {\n        const circle = getElementRoot(pullingSpinner).querySelector('circle');\n        const pullingRefresherIcon = this.el.querySelector('ion-refresher-content .refresher-pulling-icon');\n        const refreshingCircle = getElementRoot(refreshingSpinner).querySelector('circle');\n        if (circle !== null && refreshingCircle !== null) {\n            writeTask(() => {\n                circle.style.setProperty('animation', 'none');\n                // This lines up the animation on the refreshing spinner with the pulling spinner\n                refreshingSpinner.style.setProperty('animation-delay', '-655ms');\n                refreshingCircle.style.setProperty('animation-delay', '-655ms');\n            });\n        }\n        this.gesture = (await import('./index-39782642.js')).createGesture({\n            el: this.scrollEl,\n            gestureName: 'refresher',\n            gesturePriority: 31,\n            direction: 'y',\n            threshold: 5,\n            canStart: () => this.state !== 8 /* RefresherState.Refreshing */ &&\n                this.state !== 32 /* RefresherState.Completing */ &&\n                this.scrollEl.scrollTop === 0,\n            onStart: (ev) => {\n                this.progress = 0;\n                ev.data = { animation: undefined, didStart: false, cancelled: false };\n            },\n            onMove: (ev) => {\n                if ((ev.velocityY < 0 && this.progress === 0 && !ev.data.didStart) || ev.data.cancelled) {\n                    ev.data.cancelled = true;\n                    return;\n                }\n                if (!ev.data.didStart) {\n                    ev.data.didStart = true;\n                    this.state = 2 /* RefresherState.Pulling */;\n                    // When ion-refresher is being used with a custom scroll target, the overflow styles need to be applied directly instead of via a css variable\n                    const { scrollEl } = this;\n                    const overflowProperty = scrollEl.matches(ION_CONTENT_CLASS_SELECTOR) ? 'overflow' : '--overflow';\n                    writeTask(() => scrollEl.style.setProperty(overflowProperty, 'hidden'));\n                    const animationType = getRefresherAnimationType(contentEl);\n                    const animation = createPullingAnimation(animationType, pullingRefresherIcon, this.el);\n                    ev.data.animation = animation;\n                    animation.progressStart(false, 0);\n                    this.ionStart.emit();\n                    this.animations.push(animation);\n                    return;\n                }\n                // Since we are using an easing curve, slow the gesture tracking down a bit\n                this.progress = clamp(0, (ev.deltaY / 180) * 0.5, 1);\n                ev.data.animation.progressStep(this.progress);\n                this.ionPull.emit();\n            },\n            onEnd: (ev) => {\n                if (!ev.data.didStart) {\n                    return;\n                }\n                this.gesture.enable(false);\n                const { scrollEl } = this;\n                const overflowProperty = scrollEl.matches(ION_CONTENT_CLASS_SELECTOR) ? 'overflow' : '--overflow';\n                writeTask(() => scrollEl.style.removeProperty(overflowProperty));\n                if (this.progress <= 0.4) {\n                    ev.data.animation.progressEnd(0, this.progress, 500).onFinish(() => {\n                        this.animations.forEach((ani) => ani.destroy());\n                        this.animations = [];\n                        this.gesture.enable(true);\n                        this.state = 1 /* RefresherState.Inactive */;\n                    });\n                    return;\n                }\n                const progress = getTimeGivenProgression([0, 0], [0, 0], [1, 1], [1, 1], this.progress)[0];\n                const snapBackAnimation = createSnapBackAnimation(pullingRefresherIcon);\n                this.animations.push(snapBackAnimation);\n                writeTask(async () => {\n                    pullingRefresherIcon.style.setProperty('--ion-pulling-refresher-translate', `${progress * 100}px`);\n                    ev.data.animation.progressEnd();\n                    await snapBackAnimation.play();\n                    this.beginRefresh();\n                    ev.data.animation.destroy();\n                    this.gesture.enable(true);\n                });\n            },\n        });\n        this.disabledChanged();\n    }\n    async setupNativeRefresher(contentEl) {\n        if (this.scrollListenerCallback || !contentEl || this.nativeRefresher || !this.scrollEl) {\n            return;\n        }\n        /**\n         * If using non-native refresher before make sure\n         * we clean up any old CSS. This can happen when\n         * a user manually calls the refresh method in a\n         * component create callback before the native\n         * refresher is setup.\n         */\n        this.setCss(0, '', false, '');\n        this.nativeRefresher = true;\n        const pullingSpinner = this.el.querySelector('ion-refresher-content .refresher-pulling ion-spinner');\n        const refreshingSpinner = this.el.querySelector('ion-refresher-content .refresher-refreshing ion-spinner');\n        if (getIonMode(this) === 'ios') {\n            this.setupiOSNativeRefresher(pullingSpinner, refreshingSpinner);\n        }\n        else {\n            this.setupMDNativeRefresher(contentEl, pullingSpinner, refreshingSpinner);\n        }\n    }\n    componentDidUpdate() {\n        this.checkNativeRefresher();\n    }\n    async connectedCallback() {\n        if (this.el.getAttribute('slot') !== 'fixed') {\n            console.error('Make sure you use: <ion-refresher slot=\"fixed\">');\n            return;\n        }\n        const contentEl = this.el.closest(ION_CONTENT_ELEMENT_SELECTOR);\n        if (!contentEl) {\n            printIonContentErrorMsg(this.el);\n            return;\n        }\n        /**\n         * Waits for the content to be ready before querying the scroll\n         * or the background content element.\n         */\n        componentOnReady(contentEl, async () => {\n            const customScrollTarget = contentEl.querySelector(ION_CONTENT_CLASS_SELECTOR);\n            /**\n             * Query the custom scroll target (if available), first. In refresher implementations,\n             * the ion-refresher element will always be a direct child of ion-content (slot=\"fixed\"). By\n             * querying the custom scroll target first and falling back to the ion-content element,\n             * the correct scroll element will be returned by the implementation.\n             */\n            this.scrollEl = await getScrollElement(customScrollTarget !== null && customScrollTarget !== void 0 ? customScrollTarget : contentEl);\n            /**\n             * Query the background content element from the host ion-content element directly.\n             */\n            this.backgroundContentEl = await contentEl.getBackgroundElement();\n            /**\n             * Check if the content element is fullscreen to apply the correct styles\n             * when the refresher is refreshing. Otherwise, the refresher will be\n             * hidden because it is positioned behind the background content element.\n             */\n            this.contentFullscreen = contentEl.fullscreen;\n            if (await shouldUseNativeRefresher(this.el, getIonMode(this))) {\n                this.setupNativeRefresher(contentEl);\n            }\n            else {\n                this.gesture = (await import('./index-39782642.js')).createGesture({\n                    el: contentEl,\n                    gestureName: 'refresher',\n                    gesturePriority: 31,\n                    direction: 'y',\n                    threshold: 20,\n                    passive: false,\n                    canStart: () => this.canStart(),\n                    onStart: () => this.onStart(),\n                    onMove: (ev) => this.onMove(ev),\n                    onEnd: () => this.onEnd(),\n                });\n                this.disabledChanged();\n            }\n        });\n    }\n    disconnectedCallback() {\n        this.destroyNativeRefresher();\n        this.scrollEl = undefined;\n        if (this.gesture) {\n            this.gesture.destroy();\n            this.gesture = undefined;\n        }\n    }\n    /**\n     * Call `complete()` when your async operation has completed.\n     * For example, the `refreshing` state is while the app is performing\n     * an asynchronous operation, such as receiving more data from an\n     * AJAX request. Once the data has been received, you then call this\n     * method to signify that the refreshing has completed and to close\n     * the refresher. This method also changes the refresher's state from\n     * `refreshing` to `completing`.\n     */\n    async complete() {\n        if (this.nativeRefresher) {\n            this.needsCompletion = true;\n            // Do not reset scroll el until user removes pointer from screen\n            if (!this.pointerDown) {\n                raf(() => raf(() => this.resetNativeRefresher(this.elementToTransform, 32 /* RefresherState.Completing */)));\n            }\n        }\n        else {\n            this.close(32 /* RefresherState.Completing */, '120ms');\n        }\n    }\n    /**\n     * Changes the refresher's state from `refreshing` to `cancelling`.\n     */\n    async cancel() {\n        if (this.nativeRefresher) {\n            // Do not reset scroll el until user removes pointer from screen\n            if (!this.pointerDown) {\n                raf(() => raf(() => this.resetNativeRefresher(this.elementToTransform, 16 /* RefresherState.Cancelling */)));\n            }\n        }\n        else {\n            this.close(16 /* RefresherState.Cancelling */, '');\n        }\n    }\n    /**\n     * A number representing how far down the user has pulled.\n     * The number `0` represents the user hasn't pulled down at all. The\n     * number `1`, and anything greater than `1`, represents that the user\n     * has pulled far enough down that when they let go then the refresh will\n     * happen. If they let go and the number is less than `1`, then the\n     * refresh will not happen, and the content will return to it's original\n     * position.\n     */\n    getProgress() {\n        return Promise.resolve(this.progress);\n    }\n    canStart() {\n        if (!this.scrollEl) {\n            return false;\n        }\n        if (this.state !== 1 /* RefresherState.Inactive */) {\n            return false;\n        }\n        // if the scrollTop is greater than zero then it's\n        // not possible to pull the content down yet\n        if (this.scrollEl.scrollTop > 0) {\n            return false;\n        }\n        return true;\n    }\n    onStart() {\n        this.progress = 0;\n        this.state = 1 /* RefresherState.Inactive */;\n        this.memoizeOverflowStyle();\n        /**\n         * If the content is fullscreen, then we need to\n         * set the offset-top style on the background content\n         * element to ensure that the refresher is shown.\n         */\n        if (this.contentFullscreen && this.backgroundContentEl) {\n            this.backgroundContentEl.style.setProperty('--offset-top', '0px');\n        }\n    }\n    onMove(detail) {\n        if (!this.scrollEl) {\n            return;\n        }\n        // this method can get called like a bazillion times per second,\n        // so it's built to be as efficient as possible, and does its\n        // best to do any DOM read/writes only when absolutely necessary\n        // if multi-touch then get out immediately\n        const ev = detail.event;\n        if (ev.touches !== undefined && ev.touches.length > 1) {\n            return;\n        }\n        // do nothing if it's actively refreshing\n        // or it's in the way of closing\n        // or this was never a startY\n        if ((this.state & 56 /* RefresherState._BUSY_ */) !== 0) {\n            return;\n        }\n        const pullFactor = Number.isNaN(this.pullFactor) || this.pullFactor < 0 ? 1 : this.pullFactor;\n        const deltaY = detail.deltaY * pullFactor;\n        // don't bother if they're scrolling up\n        // and have not already started dragging\n        if (deltaY <= 0) {\n            // the current Y is higher than the starting Y\n            // so they scrolled up enough to be ignored\n            this.progress = 0;\n            this.state = 1 /* RefresherState.Inactive */;\n            if (this.appliedStyles) {\n                // reset the styles only if they were applied\n                this.setCss(0, '', false, '');\n                return;\n            }\n            return;\n        }\n        if (this.state === 1 /* RefresherState.Inactive */) {\n            // this refresh is not already actively pulling down\n            // get the content's scrollTop\n            const scrollHostScrollTop = this.scrollEl.scrollTop;\n            // if the scrollTop is greater than zero then it's\n            // not possible to pull the content down yet\n            if (scrollHostScrollTop > 0) {\n                this.progress = 0;\n                return;\n            }\n            // content scrolled all the way to the top, and dragging down\n            this.state = 2 /* RefresherState.Pulling */;\n        }\n        // prevent native scroll events\n        if (ev.cancelable) {\n            ev.preventDefault();\n        }\n        // the refresher is actively pulling at this point\n        // move the scroll element within the content element\n        this.setCss(deltaY, '0ms', true, '');\n        if (deltaY === 0) {\n            // don't continue if there's no delta yet\n            this.progress = 0;\n            return;\n        }\n        const pullMin = this.pullMin;\n        // set pull progress\n        this.progress = deltaY / pullMin;\n        // emit \"start\" if it hasn't started yet\n        if (!this.didStart) {\n            this.didStart = true;\n            this.ionStart.emit();\n        }\n        // emit \"pulling\" on every move\n        this.ionPull.emit();\n        // do nothing if the delta is less than the pull threshold\n        if (deltaY < pullMin) {\n            // ensure it stays in the pulling state, cuz its not ready yet\n            this.state = 2 /* RefresherState.Pulling */;\n            return;\n        }\n        if (deltaY > this.pullMax) {\n            // they pulled farther than the max, so kick off the refresh\n            this.beginRefresh();\n            return;\n        }\n        // pulled farther than the pull min!!\n        // it is now in the `ready` state!!\n        // if they let go then it'll refresh, kerpow!!\n        this.state = 4 /* RefresherState.Ready */;\n        return;\n    }\n    onEnd() {\n        // only run in a zone when absolutely necessary\n        if (this.state === 4 /* RefresherState.Ready */) {\n            // they pulled down far enough, so it's ready to refresh\n            this.beginRefresh();\n        }\n        else if (this.state === 2 /* RefresherState.Pulling */) {\n            // they were pulling down, but didn't pull down far enough\n            // set the content back to it's original location\n            // and close the refresher\n            // set that the refresh is actively cancelling\n            this.cancel();\n        }\n        else if (this.state === 1 /* RefresherState.Inactive */) {\n            /**\n             * The pull to refresh gesture was aborted\n             * so we should immediately restore any overflow styles\n             * that have been modified. Do not call this.cancel\n             * because the styles will only be reset after a timeout.\n             * If the gesture is aborted then scrolling should be\n             * available right away.\n             */\n            this.restoreOverflowStyle();\n        }\n    }\n    beginRefresh() {\n        // assumes we're already back in a zone\n        // they pulled down far enough, so it's ready to refresh\n        this.state = 8 /* RefresherState.Refreshing */;\n        // place the content in a hangout position while it thinks\n        this.setCss(this.pullMin, this.snapbackDuration, true, '');\n        // emit \"refresh\" because it was pulled down far enough\n        // and they let go to begin refreshing\n        this.ionRefresh.emit({\n            complete: this.complete.bind(this),\n        });\n    }\n    close(state, delay) {\n        // create fallback timer incase something goes wrong with transitionEnd event\n        setTimeout(() => {\n            var _a;\n            this.state = 1 /* RefresherState.Inactive */;\n            this.progress = 0;\n            this.didStart = false;\n            /**\n             * Reset any overflow styles so the\n             * user can scroll again.\n             */\n            this.setCss(0, '0ms', false, '', true);\n            /**\n             * Reset the offset-top style on the background content\n             * when the refresher is no longer refreshing and the\n             * content is fullscreen.\n             *\n             * This ensures that the behavior of background content\n             * does not change when refreshing is complete.\n             */\n            if (this.contentFullscreen && this.backgroundContentEl) {\n                (_a = this.backgroundContentEl) === null || _a === void 0 ? void 0 : _a.style.removeProperty('--offset-top');\n            }\n        }, 600);\n        // reset the styles on the scroll element\n        // set that the refresh is actively cancelling/completing\n        this.state = state;\n        this.setCss(0, this.closeDuration, true, delay);\n    }\n    setCss(y, duration, overflowVisible, delay, shouldRestoreOverflowStyle = false) {\n        if (this.nativeRefresher) {\n            return;\n        }\n        this.appliedStyles = y > 0;\n        writeTask(() => {\n            if (this.scrollEl && this.backgroundContentEl) {\n                const scrollStyle = this.scrollEl.style;\n                const backgroundStyle = this.backgroundContentEl.style;\n                scrollStyle.transform = backgroundStyle.transform = y > 0 ? `translateY(${y}px) translateZ(0px)` : '';\n                scrollStyle.transitionDuration = backgroundStyle.transitionDuration = duration;\n                scrollStyle.transitionDelay = backgroundStyle.transitionDelay = delay;\n                scrollStyle.overflow = overflowVisible ? 'hidden' : '';\n            }\n            /**\n             * Reset the overflow styles only once\n             * the pull to refresh effect has been closed.\n             * This ensures that the gesture is done\n             * and the refresh operation has either\n             * been aborted or has completed.\n             */\n            if (shouldRestoreOverflowStyle) {\n                this.restoreOverflowStyle();\n            }\n        });\n    }\n    memoizeOverflowStyle() {\n        if (this.scrollEl) {\n            const { overflow, overflowX, overflowY } = this.scrollEl.style;\n            this.overflowStyles = {\n                overflow: overflow !== null && overflow !== void 0 ? overflow : '',\n                overflowX: overflowX !== null && overflowX !== void 0 ? overflowX : '',\n                overflowY: overflowY !== null && overflowY !== void 0 ? overflowY : '',\n            };\n        }\n    }\n    restoreOverflowStyle() {\n        if (this.overflowStyles !== undefined && this.scrollEl !== undefined) {\n            const { overflow, overflowX, overflowY } = this.overflowStyles;\n            this.scrollEl.style.overflow = overflow;\n            this.scrollEl.style.overflowX = overflowX;\n            this.scrollEl.style.overflowY = overflowY;\n            this.overflowStyles = undefined;\n        }\n    }\n    render() {\n        const mode = getIonMode(this);\n        return (h(Host, { key: '9d4ac22988aec2c6af0b0c90934c52f62f0e4ce3', slot: \"fixed\", class: {\n                [mode]: true,\n                // Used internally for styling\n                [`refresher-${mode}`]: true,\n                'refresher-native': this.nativeRefresher,\n                'refresher-active': this.state !== 1 /* RefresherState.Inactive */,\n                'refresher-pulling': this.state === 2 /* RefresherState.Pulling */,\n                'refresher-ready': this.state === 4 /* RefresherState.Ready */,\n                'refresher-refreshing': this.state === 8 /* RefresherState.Refreshing */,\n                'refresher-cancelling': this.state === 16 /* RefresherState.Cancelling */,\n                'refresher-completing': this.state === 32 /* RefresherState.Completing */,\n            } }));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"disabled\": [\"disabledChanged\"]\n    }; }\n};\nRefresher.style = {\n    ios: IonRefresherIosStyle0,\n    md: IonRefresherMdStyle0\n};\n\nconst RefresherContent = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.customHTMLEnabled = config.get('innerHTMLTemplatesEnabled', ENABLE_HTML_CONTENT_DEFAULT);\n        this.pullingIcon = undefined;\n        this.pullingText = undefined;\n        this.refreshingSpinner = undefined;\n        this.refreshingText = undefined;\n    }\n    componentWillLoad() {\n        if (this.pullingIcon === undefined) {\n            /**\n             * The native iOS refresher uses a spinner instead of\n             * an icon, so we need to see if this device supports\n             * the native iOS refresher.\n             */\n            const hasRubberBandScrolling = supportsRubberBandScrolling();\n            const mode = getIonMode(this);\n            const overflowRefresher = hasRubberBandScrolling ? 'lines' : arrowDown;\n            this.pullingIcon = config.get('refreshingIcon', mode === 'ios' && hasRubberBandScrolling ? config.get('spinner', overflowRefresher) : 'circular');\n        }\n        if (this.refreshingSpinner === undefined) {\n            const mode = getIonMode(this);\n            this.refreshingSpinner = config.get('refreshingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'circular'));\n        }\n    }\n    renderPullingText() {\n        const { customHTMLEnabled, pullingText } = this;\n        if (customHTMLEnabled) {\n            return h(\"div\", { class: \"refresher-pulling-text\", innerHTML: sanitizeDOMString(pullingText) });\n        }\n        return h(\"div\", { class: \"refresher-pulling-text\" }, pullingText);\n    }\n    renderRefreshingText() {\n        const { customHTMLEnabled, refreshingText } = this;\n        if (customHTMLEnabled) {\n            return h(\"div\", { class: \"refresher-refreshing-text\", innerHTML: sanitizeDOMString(refreshingText) });\n        }\n        return h(\"div\", { class: \"refresher-refreshing-text\" }, refreshingText);\n    }\n    render() {\n        const pullingIcon = this.pullingIcon;\n        const hasSpinner = pullingIcon != null && SPINNERS[pullingIcon] !== undefined;\n        const mode = getIonMode(this);\n        return (h(Host, { key: '19633bbcf02e3dba885d6bdcdaf2269bf4c8e2f5', class: mode }, h(\"div\", { key: '28922e434a55a6cac0476fe2bee56941ce0d1c02', class: \"refresher-pulling\" }, this.pullingIcon && hasSpinner && (h(\"div\", { key: 'fe575bf996021884677e9b23a3215d63caf894f5', class: \"refresher-pulling-icon\" }, h(\"div\", { key: '59fe12297fd95bc33b8df8cd35316e2a1c084d91', class: \"spinner-arrow-container\" }, h(\"ion-spinner\", { key: 'af9cc013ae04945c140b2865610ca73edb52ab48', name: this.pullingIcon, paused: true }), mode === 'md' && this.pullingIcon === 'circular' && (h(\"div\", { key: '34df66ad1b0f706a0532957251aa2c20bf4587d8', class: \"arrow-container\" }, h(\"ion-icon\", { key: 'ffdb5c123e606b823491c6c51cc2b497f62581bb', icon: caretBackSharp, \"aria-hidden\": \"true\" })))))), this.pullingIcon && !hasSpinner && (h(\"div\", { key: 'ac3a2032bb969264d20fa057e9123441005d7a9d', class: \"refresher-pulling-icon\" }, h(\"ion-icon\", { key: 'd969d10915548e72aae289b52154366f3dd39b31', icon: this.pullingIcon, lazy: false, \"aria-hidden\": \"true\" }))), this.pullingText !== undefined && this.renderPullingText()), h(\"div\", { key: 'a8f854f81a94812d7bef8ce088331d94f49ff53d', class: \"refresher-refreshing\" }, this.refreshingSpinner && (h(\"div\", { key: 'a1f646945370e40c844d62bc0c647443ae9dfbe7', class: \"refresher-refreshing-icon\" }, h(\"ion-spinner\", { key: 'ab3ff4047769b6436e222b46d193c1e8b23e2fce', name: this.refreshingSpinner }))), this.refreshingText !== undefined && this.renderRefreshingText())));\n    }\n    get el() { return getElement(this); }\n};\n\nexport { Refresher as ion_refresher, RefresherContent as ion_refresher_content };\n"],"x_google_ignoreList":[0]}